
Prac12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00000f88  0000101c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008000ae  008000ae  0000106a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000106a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001096  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c7  00000000  00000000  0000227a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000909  00000000  00000000  00002c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  0000354c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056c  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c05  00000000  00000000  00003d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004979  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3a       	cpi	r26, 0xAE	; 174
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae ea       	ldi	r26, 0xAE	; 174
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3c       	cpi	r26, 0xC0	; 192
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 09 02 	call	0x412	; 0x412 <main>
  8a:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  92:	ae 9a       	sbi	0x15, 6	; 21
  94:	00 c0       	rjmp	.+0      	; 0x96 <toggle_e+0x4>
  96:	ae 98       	cbi	0x15, 6	; 21
  98:	08 95       	ret

0000009a <lcd_write>:
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	d8 2f       	mov	r29, r24
  a0:	66 23       	and	r22, r22
  a2:	11 f0       	breq	.+4      	; 0xa8 <lcd_write+0xe>
  a4:	ac 9a       	sbi	0x15, 4	; 21
  a6:	01 c0       	rjmp	.+2      	; 0xaa <lcd_write+0x10>
  a8:	ac 98       	cbi	0x15, 4	; 21
  aa:	ad 98       	cbi	0x15, 5	; 21
  ac:	84 b3       	in	r24, 0x14	; 20
  ae:	8f 60       	ori	r24, 0x0F	; 15
  b0:	84 bb       	out	0x14, r24	; 20
  b2:	c5 b3       	in	r28, 0x15	; 21
  b4:	c0 7f       	andi	r28, 0xF0	; 240
  b6:	8d 2f       	mov	r24, r29
  b8:	82 95       	swap	r24
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	8c 2b       	or	r24, r28
  be:	85 bb       	out	0x15, r24	; 21
  c0:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  c4:	df 70       	andi	r29, 0x0F	; 15
  c6:	dc 2b       	or	r29, r28
  c8:	d5 bb       	out	0x15, r29	; 21
  ca:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  ce:	cf 60       	ori	r28, 0x0F	; 15
  d0:	c5 bb       	out	0x15, r28	; 21
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <lcd_read>:
  d8:	88 23       	and	r24, r24
  da:	11 f0       	breq	.+4      	; 0xe0 <lcd_read+0x8>
  dc:	ac 9a       	sbi	0x15, 4	; 21
  de:	01 c0       	rjmp	.+2      	; 0xe2 <lcd_read+0xa>
  e0:	ac 98       	cbi	0x15, 4	; 21
  e2:	ad 9a       	sbi	0x15, 5	; 21
  e4:	84 b3       	in	r24, 0x14	; 20
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	84 bb       	out	0x14, r24	; 20
  ea:	ae 9a       	sbi	0x15, 6	; 21
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_read+0x16>
  ee:	93 b3       	in	r25, 0x13	; 19
  f0:	ae 98       	cbi	0x15, 6	; 21
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_read+0x1c>
  f4:	ae 9a       	sbi	0x15, 6	; 21
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_read+0x20>
  f8:	23 b3       	in	r18, 0x13	; 19
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	89 2f       	mov	r24, r25
  fe:	82 95       	swap	r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	ae 98       	cbi	0x15, 6	; 21
 104:	82 2b       	or	r24, r18
 106:	08 95       	ret

00000108 <lcd_waitbusy>:
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_read>
 10e:	88 23       	and	r24, r24
 110:	dc f3       	brlt	.-10     	; 0x108 <lcd_waitbusy>
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_waitbusy+0xc>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_read>
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
 120:	0e 94 84 00 	call	0x108	; 0x108 <lcd_waitbusy>
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	8c 2f       	mov	r24, r28
 128:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <lcd_gotoxy>:
 130:	61 11       	cpse	r22, r1
 132:	04 c0       	rjmp	.+8      	; 0x13c <lcd_gotoxy+0xc>
 134:	80 58       	subi	r24, 0x80	; 128
 136:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13a:	08 95       	ret
 13c:	80 54       	subi	r24, 0x40	; 64
 13e:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 142:	08 95       	ret

00000144 <lcd_clrscr>:
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 14a:	08 95       	ret

0000014c <lcd_putc>:
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
 150:	0e 94 84 00 	call	0x108	; 0x108 <lcd_waitbusy>
 154:	ca 30       	cpi	r28, 0x0A	; 10
 156:	49 f4       	brne	.+18     	; 0x16a <lcd_putc+0x1e>
 158:	80 34       	cpi	r24, 0x40	; 64
 15a:	10 f0       	brcs	.+4      	; 0x160 <lcd_putc+0x14>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	01 c0       	rjmp	.+2      	; 0x162 <lcd_putc+0x16>
 160:	80 e4       	ldi	r24, 0x40	; 64
 162:	80 58       	subi	r24, 0x80	; 128
 164:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 168:	04 c0       	rjmp	.+8      	; 0x172 <lcd_putc+0x26>
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	8c 2f       	mov	r24, r28
 16e:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <lcd_puts>:
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	fc 01       	movw	r30, r24
 180:	80 81       	ld	r24, Z
 182:	88 23       	and	r24, r24
 184:	29 f0       	breq	.+10     	; 0x190 <lcd_puts+0x1a>
 186:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_putc>
 18a:	89 91       	ld	r24, Y+
 18c:	81 11       	cpse	r24, r1
 18e:	fb cf       	rjmp	.-10     	; 0x186 <lcd_puts+0x10>
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 19e:	84 b3       	in	r24, 0x14	; 20
 1a0:	8f 67       	ori	r24, 0x7F	; 127
 1a2:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1a4:	80 ea       	ldi	r24, 0xA0	; 160
 1a6:	9f e0       	ldi	r25, 0x0F	; 15
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1ac:	a9 9a       	sbi	0x15, 1	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1ae:	a8 9a       	sbi	0x15, 0	; 21
    lcd_e_toggle();
 1b0:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b4:	80 ee       	ldi	r24, 0xE0	; 224
 1b6:	94 e0       	ldi	r25, 0x04	; 4
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1bc:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c0:	c0 e1       	ldi	r28, 0x10	; 16
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1d4:	a8 98       	cbi	0x15, 0	; 21
    lcd_e_toggle();
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1da:	21 97       	sbiw	r28, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1de:	88 e2       	ldi	r24, 0x28	; 40
 1e0:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1e4:	88 e0       	ldi	r24, 0x08	; 8
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1ea:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1ee:	86 e0       	ldi	r24, 0x06	; 6
 1f0:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1f4:	81 2f       	mov	r24, r17
 1f6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>

}/* lcd_init */
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	08 95       	ret

00000202 <__vector_19>:
}

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (*LUGAR&(1<<BIT));
}
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <tecladoFuncion>:

uint8_t tecladoFuncion(volatile uint8_t *DDRT, volatile uint8_t *PORTT, volatile uint8_t *PINT) {
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	ec 01       	movw	r28, r24
 220:	db 01       	movw	r26, r22
 222:	fa 01       	movw	r30, r20
	
	for(uint8_t i=filas; i<=filasend;i++){
 224:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <filas>
 228:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <filasend>
 22c:	89 17       	cp	r24, r25
 22e:	88 f0       	brcs	.+34     	; 0x252 <tecladoFuncion+0x3c>
		*DDRT |= (1<<i);		// definimos puerto para teclado
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	88 81       	ld	r24, Y
 236:	9a 01       	movw	r18, r20
 238:	09 2e       	mov	r0, r25
 23a:	02 c0       	rjmp	.+4      	; 0x240 <tecladoFuncion+0x2a>
 23c:	22 0f       	add	r18, r18
 23e:	33 1f       	adc	r19, r19
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <tecladoFuncion+0x26>
 244:	28 2b       	or	r18, r24
 246:	28 83       	st	Y, r18
	return (*LUGAR&(1<<BIT));
}

uint8_t tecladoFuncion(volatile uint8_t *DDRT, volatile uint8_t *PORTT, volatile uint8_t *PINT) {
	
	for(uint8_t i=filas; i<=filasend;i++){
 248:	9f 5f       	subi	r25, 0xFF	; 255
 24a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <filasend>
 24e:	89 17       	cp	r24, r25
 250:	88 f7       	brcc	.-30     	; 0x234 <tecladoFuncion+0x1e>
		*DDRT |= (1<<i);		// definimos puerto para teclado
	}
	
	while(1) {
		
		*PORTT = 0b11111111;
 252:	0f ef       	ldi	r16, 0xFF	; 255
		
		for (uint8_t fila = filas; fila <= filasend; fila++) {
			
			*PORTT = ~(1<<fila);
 254:	c1 e0       	ldi	r28, 0x01	; 1
 256:	d0 e0       	ldi	r29, 0x00	; 0
		*DDRT |= (1<<i);		// definimos puerto para teclado
	}
	
	while(1) {
		
		*PORTT = 0b11111111;
 258:	0c 93       	st	X, r16
		
		for (uint8_t fila = filas; fila <= filasend; fila++) {
 25a:	10 91 b0 00 	lds	r17, 0x00B0	; 0x8000b0 <filas>
 25e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <filasend>
 262:	81 17       	cp	r24, r17
 264:	c8 f3       	brcs	.-14     	; 0x258 <tecladoFuncion+0x42>
			
			*PORTT = ~(1<<fila);
 266:	61 2f       	mov	r22, r17
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	ce 01       	movw	r24, r28
 26c:	01 2e       	mov	r0, r17
 26e:	02 c0       	rjmp	.+4      	; 0x274 <tecladoFuncion+0x5e>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <tecladoFuncion+0x5a>
 278:	80 95       	com	r24
 27a:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27c:	00 c0       	rjmp	.+0      	; 0x27e <tecladoFuncion+0x68>
			_delay_us(2);
			
			for (uint8_t col = columnas; col <= columnasend; col++) {
 27e:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <columnas>
 282:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <columnasend>
 286:	32 17       	cp	r19, r18
 288:	08 f4       	brcc	.+2      	; 0x28c <tecladoFuncion+0x76>
 28a:	4b c0       	rjmp	.+150    	; 0x322 <tecladoFuncion+0x10c>
	TIFR = 0B00000011;
}

uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
 28c:	80 81       	ld	r24, Z
 28e:	42 2f       	mov	r20, r18
 290:	50 e0       	ldi	r21, 0x00	; 0
			*PORTT = ~(1<<fila);
			_delay_us(2);
			
			for (uint8_t col = columnas; col <= columnasend; col++) {
				
				if (cero_en_bit(PINT,col)) {
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 2e       	mov	r0, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <tecladoFuncion+0x86>
 298:	95 95       	asr	r25
 29a:	87 95       	ror	r24
 29c:	0a 94       	dec	r0
 29e:	e2 f7       	brpl	.-8      	; 0x298 <tecladoFuncion+0x82>
 2a0:	80 fd       	sbrc	r24, 0
 2a2:	3c c0       	rjmp	.+120    	; 0x31c <tecladoFuncion+0x106>
 2a4:	0c c0       	rjmp	.+24     	; 0x2be <tecladoFuncion+0xa8>
	TIFR = 0B00000011;
}

uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
 2a6:	80 81       	ld	r24, Z
 2a8:	42 2f       	mov	r20, r18
 2aa:	50 e0       	ldi	r21, 0x00	; 0
			*PORTT = ~(1<<fila);
			_delay_us(2);
			
			for (uint8_t col = columnas; col <= columnasend; col++) {
				
				if (cero_en_bit(PINT,col)) {
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 2e       	mov	r0, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <tecladoFuncion+0xa0>
 2b2:	95 95       	asr	r25
 2b4:	87 95       	ror	r24
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <tecladoFuncion+0x9c>
 2ba:	80 fd       	sbrc	r24, 0
 2bc:	2f c0       	rjmp	.+94     	; 0x31c <tecladoFuncion+0x106>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	87 ea       	ldi	r24, 0xA7	; 167
 2c0:	91 e6       	ldi	r25, 0x61	; 97
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <tecladoFuncion+0xac>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <tecladoFuncion+0xb2>
 2c8:	00 00       	nop
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	04 2e       	mov	r0, r20
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <tecladoFuncion+0xc0>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <tecladoFuncion+0xbc>
	TIFR = 0B00000011;
}

uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
 2da:	80 81       	ld	r24, Z
			
			for (uint8_t col = columnas; col <= columnasend; col++) {
				
				if (cero_en_bit(PINT,col)) {
					_delay_ms(100);
					while(cero_en_bit(PINT,col)) {}
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	82 23       	and	r24, r18
 2e0:	93 23       	and	r25, r19
 2e2:	89 2b       	or	r24, r25
 2e4:	d1 f3       	breq	.-12     	; 0x2da <tecladoFuncion+0xc4>
 2e6:	87 ea       	ldi	r24, 0xA7	; 167
 2e8:	91 e6       	ldi	r25, 0x61	; 97
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <tecladoFuncion+0xd4>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <tecladoFuncion+0xda>
 2f0:	00 00       	nop
					_delay_ms(100);
					return teclado[filasend-fila][columnasend-col];
 2f2:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <filasend>
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	86 1b       	sub	r24, r22
 2fa:	97 0b       	sbc	r25, r23
 2fc:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <columnasend>
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	24 1b       	sub	r18, r20
 304:	35 0b       	sbc	r19, r21
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	80 5a       	subi	r24, 0xA0	; 160
 310:	9f 4f       	sbci	r25, 0xFF	; 255
 312:	fc 01       	movw	r30, r24
 314:	e2 0f       	add	r30, r18
 316:	f3 1f       	adc	r31, r19
 318:	80 81       	ld	r24, Z
 31a:	0a c0       	rjmp	.+20     	; 0x330 <tecladoFuncion+0x11a>
		for (uint8_t fila = filas; fila <= filasend; fila++) {
			
			*PORTT = ~(1<<fila);
			_delay_us(2);
			
			for (uint8_t col = columnas; col <= columnasend; col++) {
 31c:	2f 5f       	subi	r18, 0xFF	; 255
 31e:	32 17       	cp	r19, r18
 320:	10 f6       	brcc	.-124    	; 0x2a6 <tecladoFuncion+0x90>
	
	while(1) {
		
		*PORTT = 0b11111111;
		
		for (uint8_t fila = filas; fila <= filasend; fila++) {
 322:	1f 5f       	subi	r17, 0xFF	; 255
 324:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <filasend>
 328:	81 17       	cp	r24, r17
 32a:	08 f0       	brcs	.+2      	; 0x32e <tecladoFuncion+0x118>
 32c:	9c cf       	rjmp	.-200    	; 0x266 <tecladoFuncion+0x50>
 32e:	94 cf       	rjmp	.-216    	; 0x258 <tecladoFuncion+0x42>
					return teclado[filasend-fila][columnasend-col];
				}
			}
		}
	}
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	08 95       	ret

0000033a <EEPROM_write>:

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	while (EECR & (1<<EEWE)){}
 33a:	e1 99       	sbic	0x1c, 1	; 28
 33c:	fe cf       	rjmp	.-4      	; 0x33a <EEPROM_write>
	EEAR = uiAddress;
 33e:	9f bb       	out	0x1f, r25	; 31
 340:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 342:	6d bb       	out	0x1d, r22	; 29
	cli();
 344:	f8 94       	cli
	EECR |= (1<<EEMWE);
 346:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEWE);
 348:	e1 9a       	sbi	0x1c, 1	; 28
	sei();
 34a:	78 94       	sei
 34c:	08 95       	ret

0000034e <__vector_14>:
ISR(TIMER0_COMP_vect)
{
}

ISR(ADC_vect)
{
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	2f 93       	push	r18
 35a:	3f 93       	push	r19
 35c:	4f 93       	push	r20
 35e:	5f 93       	push	r21
 360:	6f 93       	push	r22
 362:	7f 93       	push	r23
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	af 93       	push	r26
 36a:	bf 93       	push	r27
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
	uint16_t res  = ADC;
 374:	64 b1       	in	r22, 0x04	; 4
 376:	75 b1       	in	r23, 0x05	; 5
	float resDisplay = ((float)res*255)/1023;
	int floatCeil =(int) resDisplay;
	uint8_t EPdat = (uint8_t) floatCeil;
	
	EEPROM_write(contEP,EPdat);
 378:	c0 91 ae 00 	lds	r28, 0x00AE	; 0x8000ae <__data_end>
 37c:	d0 91 af 00 	lds	r29, 0x00AF	; 0x8000af <__data_end+0x1>
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__floatunsisf>
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	4f e7       	ldi	r20, 0x7F	; 127
 38e:	53 e4       	ldi	r21, 0x43	; 67
 390:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__mulsf3>
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 ec       	ldi	r19, 0xC0	; 192
 398:	4f e7       	ldi	r20, 0x7F	; 127
 39a:	54 e4       	ldi	r21, 0x44	; 68
 39c:	0e 94 35 03 	call	0x66a	; 0x66a <__divsf3>
 3a0:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
 3a4:	ce 01       	movw	r24, r28
 3a6:	0e 94 9d 01 	call	0x33a	; 0x33a <EEPROM_write>
	contEP++;
 3aa:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 3ae:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <__data_end+0x1>
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <__data_end+0x1>
 3b8:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
	if (contEP>511)
 3bc:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 3c0:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <__data_end+0x1>
 3c4:	81 15       	cp	r24, r1
 3c6:	92 40       	sbci	r25, 0x02	; 2
 3c8:	44 f0       	brlt	.+16     	; 0x3da <__vector_14+0x8c>
	{
		TCCR0 = 0b00001000;
 3ca:	88 e0       	ldi	r24, 0x08	; 8
 3cc:	83 bf       	out	0x33, r24	; 51
		lcd_clrscr();
 3ce:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clrscr>
		lcd_puts("EEPROM llena");
 3d2:	83 e7       	ldi	r24, 0x73	; 115
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
	}
	TIFR = 0B00000011;
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	88 bf       	out	0x38, r24	; 56
}
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	7f 91       	pop	r23
 3f0:	6f 91       	pop	r22
 3f2:	5f 91       	pop	r21
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <EEPROM_read>:
	sei();
}

uint8_t EEPROM_read(uint16_t uiAddress)
{
	while (EECR & (1<<EEWE)){}
 404:	e1 99       	sbic	0x1c, 1	; 28
 406:	fe cf       	rjmp	.-4      	; 0x404 <EEPROM_read>
	EEAR = uiAddress;
 408:	9f bb       	out	0x1f, r25	; 31
 40a:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);
 40c:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
 40e:	8d b3       	in	r24, 0x1d	; 29
 410:	08 95       	ret

00000412 <main>:
volatile int contEP = 0;
char numToString[15];

int main(void)
{
	for (int i = 0; i<512; i++)
 412:	c0 e0       	ldi	r28, 0x00	; 0
 414:	d0 e0       	ldi	r29, 0x00	; 0
	EEPROM_write(i,0);
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	ce 01       	movw	r24, r28
 41a:	0e 94 9d 01 	call	0x33a	; 0x33a <EEPROM_write>
volatile int contEP = 0;
char numToString[15];

int main(void)
{
	for (int i = 0; i<512; i++)
 41e:	21 96       	adiw	r28, 0x01	; 1
 420:	c1 15       	cp	r28, r1
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	d8 07       	cpc	r29, r24
 426:	b9 f7       	brne	.-18     	; 0x416 <main+0x4>
	EEPROM_write(i,0);
	sei();
 428:	78 94       	sei
	//CONFIGUTACION ADC
	ADMUX = 0b01000000;
 42a:	80 e4       	ldi	r24, 0x40	; 64
 42c:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0B10111011;
 42e:	8b eb       	ldi	r24, 0xBB	; 187
 430:	86 b9       	out	0x06, r24	; 6
	SFIOR = 0B01100000;
 432:	80 e6       	ldi	r24, 0x60	; 96
 434:	80 bf       	out	0x30, r24	; 48
	
	
	//CONFIGURACION TIMER
	TCCR0 = 0b00001101;
 436:	8d e0       	ldi	r24, 0x0D	; 13
 438:	83 bf       	out	0x33, r24	; 51
	OCR0 = 243;
 43a:	83 ef       	ldi	r24, 0xF3	; 243
 43c:	8c bf       	out	0x3c, r24	; 60
	TIMSK = 0B00000010;
 43e:	82 e0       	ldi	r24, 0x02	; 2
 440:	89 bf       	out	0x39, r24	; 57
	TIFR = 0B00000011;
 442:	83 e0       	ldi	r24, 0x03	; 3
 444:	88 bf       	out	0x38, r24	; 56
	
	lcd_init(LCD_DISP_ON);
 446:	8c e0       	ldi	r24, 0x0C	; 12
 448:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_init>
	lcd_puts("Sensando...");
 44c:	80 e8       	ldi	r24, 0x80	; 128
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
	int sensingFlag = 0;
	int contValores = 0;
 454:	c1 2c       	mov	r12, r1
 456:	d1 2c       	mov	r13, r1
	TIMSK = 0B00000010;
	TIFR = 0B00000011;
	
	lcd_init(LCD_DISP_ON);
	lcd_puts("Sensando...");
	int sensingFlag = 0;
 458:	c0 e0       	ldi	r28, 0x00	; 0
 45a:	d0 e0       	ldi	r29, 0x00	; 0
			if (contValores<=contEP)
			{
				lcd_gotoxy(0,1);
				lcd_puts("                ");
				lcd_gotoxy(0,1);
				sprintf(numToString,"%d",contValores);
 45c:	0f 2e       	mov	r0, r31
 45e:	f9 e9       	ldi	r31, 0x99	; 153
 460:	ef 2e       	mov	r14, r31
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	ff 2e       	mov	r15, r31
 466:	f0 2d       	mov	r31, r0
 468:	01 eb       	ldi	r16, 0xB1	; 177
 46a:	10 e0       	ldi	r17, 0x00	; 0
				
			}
			else
			{
				contEP--;
				TCCR0 = 0b00001000;
 46c:	68 94       	set
 46e:	88 24       	eor	r8, r8
 470:	83 f8       	bld	r8, 3
				sprintf(numToString,"%d",contEP);
				lcd_puts(numToString);
				lcd_puts("   ");
				sprintf(numToString,"%d",EEPROM_read(contEP));
				lcd_puts(numToString);
				sensingFlag = 1;
 472:	99 24       	eor	r9, r9
 474:	93 94       	inc	r9
 476:	a1 2c       	mov	r10, r1
					EEPROM_write(i,0);
				contEP = 0;
				sensingFlag = 0;
				lcd_clrscr();
				lcd_puts("Sensando...");
				TCCR0 = 0b00001101;
 478:	0f 2e       	mov	r0, r31
 47a:	fd e0       	ldi	r31, 0x0D	; 13
 47c:	bf 2e       	mov	r11, r31
 47e:	f0 2d       	mov	r31, r0
 480:	02 c0       	rjmp	.+4      	; 0x486 <__stack+0x27>
				sprintf(numToString,"%d",EEPROM_read(contValores));
				lcd_puts(numToString);
			}
			else
			{
				contValores = 0;
 482:	c1 2c       	mov	r12, r1
 484:	d1 2c       	mov	r13, r1
	int sensingFlag = 0;
	int contValores = 0;
	
	while (1)
	{
		uint8_t lectura = tecladoFuncion(&DDRD, &PORTD, &PIND);
 486:	40 e3       	ldi	r20, 0x30	; 48
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	62 e3       	ldi	r22, 0x32	; 50
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	81 e3       	ldi	r24, 0x31	; 49
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 0b 01 	call	0x216	; 0x216 <tecladoFuncion>
		if (lectura == 13)
 496:	8d 30       	cpi	r24, 0x0D	; 13
 498:	09 f0       	breq	.+2      	; 0x49c <__stack+0x3d>
 49a:	62 c0       	rjmp	.+196    	; 0x560 <__stack+0x101>
		{
			if (sensingFlag)
 49c:	cd 2b       	or	r28, r29
 49e:	c9 f0       	breq	.+50     	; 0x4d2 <__stack+0x73>
 4a0:	c0 e0       	ldi	r28, 0x00	; 0
 4a2:	d0 e0       	ldi	r29, 0x00	; 0
			{
				for (int i = 0; i<512; i++)
					EEPROM_write(i,0);
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	ce 01       	movw	r24, r28
 4a8:	0e 94 9d 01 	call	0x33a	; 0x33a <EEPROM_write>
		uint8_t lectura = tecladoFuncion(&DDRD, &PORTD, &PIND);
		if (lectura == 13)
		{
			if (sensingFlag)
			{
				for (int i = 0; i<512; i++)
 4ac:	21 96       	adiw	r28, 0x01	; 1
 4ae:	c1 15       	cp	r28, r1
 4b0:	92 e0       	ldi	r25, 0x02	; 2
 4b2:	d9 07       	cpc	r29, r25
 4b4:	b9 f7       	brne	.-18     	; 0x4a4 <__stack+0x45>
					EEPROM_write(i,0);
				contEP = 0;
 4b6:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__data_end+0x1>
 4ba:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__data_end>
				sensingFlag = 0;
				lcd_clrscr();
 4be:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clrscr>
				lcd_puts("Sensando...");
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				TCCR0 = 0b00001101;
 4ca:	b3 be       	out	0x33, r11	; 51
			if (sensingFlag)
			{
				for (int i = 0; i<512; i++)
					EEPROM_write(i,0);
				contEP = 0;
				sensingFlag = 0;
 4cc:	c0 e0       	ldi	r28, 0x00	; 0
 4ce:	d0 e0       	ldi	r29, 0x00	; 0
 4d0:	da cf       	rjmp	.-76     	; 0x486 <__stack+0x27>
				TCCR0 = 0b00001101;
				
			}
			else
			{
				contEP--;
 4d2:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 4d6:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <__data_end+0x1>
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <__data_end+0x1>
 4e0:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
				TCCR0 = 0b00001000;
 4e4:	83 be       	out	0x33, r8	; 51
				lcd_clrscr();
 4e6:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clrscr>
				lcd_puts("Ultimos val.");
 4ea:	8c e8       	ldi	r24, 0x8C	; 140
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				lcd_gotoxy(0,1);
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 98 00 	call	0x130	; 0x130 <lcd_gotoxy>
				sprintf(numToString,"%d",contEP);
 4fa:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 4fe:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <__data_end+0x1>
 502:	9f 93       	push	r25
 504:	8f 93       	push	r24
 506:	ff 92       	push	r15
 508:	ef 92       	push	r14
 50a:	1f 93       	push	r17
 50c:	0f 93       	push	r16
 50e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <sprintf>
				lcd_puts(numToString);
 512:	c8 01       	movw	r24, r16
 514:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				lcd_puts("   ");
 518:	89 ea       	ldi	r24, 0xA9	; 169
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				sprintf(numToString,"%d",EEPROM_read(contEP));
 520:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 524:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <__data_end+0x1>
 528:	0e 94 02 02 	call	0x404	; 0x404 <EEPROM_read>
 52c:	1f 92       	push	r1
 52e:	8f 93       	push	r24
 530:	ff 92       	push	r15
 532:	ef 92       	push	r14
 534:	1f 93       	push	r17
 536:	0f 93       	push	r16
 538:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <sprintf>
				lcd_puts(numToString);
 53c:	c8 01       	movw	r24, r16
 53e:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				sensingFlag = 1;
				contValores = contEP;
 542:	c0 90 ae 00 	lds	r12, 0x00AE	; 0x8000ae <__data_end>
 546:	d0 90 af 00 	lds	r13, 0x00AF	; 0x8000af <__data_end+0x1>
 54a:	8d b7       	in	r24, 0x3d	; 61
 54c:	9e b7       	in	r25, 0x3e	; 62
 54e:	0c 96       	adiw	r24, 0x0c	; 12
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	f8 94       	cli
 554:	9e bf       	out	0x3e, r25	; 62
 556:	0f be       	out	0x3f, r0	; 63
 558:	8d bf       	out	0x3d, r24	; 61
				sprintf(numToString,"%d",contEP);
				lcd_puts(numToString);
				lcd_puts("   ");
				sprintf(numToString,"%d",EEPROM_read(contEP));
				lcd_puts(numToString);
				sensingFlag = 1;
 55a:	c9 2d       	mov	r28, r9
 55c:	da 2d       	mov	r29, r10
 55e:	93 cf       	rjmp	.-218    	; 0x486 <__stack+0x27>
				contValores = contEP;
			}
		}
		else if (lectura == 15 && sensingFlag == 1)
 560:	8f 30       	cpi	r24, 0x0F	; 15
 562:	d9 f5       	brne	.+118    	; 0x5da <__stack+0x17b>
 564:	c1 30       	cpi	r28, 0x01	; 1
 566:	d1 05       	cpc	r29, r1
 568:	09 f0       	breq	.+2      	; 0x56c <__stack+0x10d>
 56a:	8d cf       	rjmp	.-230    	; 0x486 <__stack+0x27>
		{
			
			contValores--;
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	c9 1a       	sub	r12, r25
 570:	d1 08       	sbc	r13, r1
			if (contValores>=0)
 572:	0a f4       	brpl	.+2      	; 0x576 <__stack+0x117>
 574:	86 cf       	rjmp	.-244    	; 0x482 <__stack+0x23>
			{
				lcd_gotoxy(0,1);
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	0e 94 98 00 	call	0x130	; 0x130 <lcd_gotoxy>
				lcd_puts("                ");
 57e:	8c e9       	ldi	r24, 0x9C	; 156
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				lcd_gotoxy(0,1);
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	0e 94 98 00 	call	0x130	; 0x130 <lcd_gotoxy>
				sprintf(numToString,"%d",contValores);
 58e:	df 92       	push	r13
 590:	cf 92       	push	r12
 592:	ff 92       	push	r15
 594:	ef 92       	push	r14
 596:	1f 93       	push	r17
 598:	0f 93       	push	r16
 59a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <sprintf>
				lcd_puts(numToString);
 59e:	c8 01       	movw	r24, r16
 5a0:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				lcd_puts("   ");
 5a4:	89 ea       	ldi	r24, 0xA9	; 169
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				sprintf(numToString,"%d",EEPROM_read(contValores));
 5ac:	c6 01       	movw	r24, r12
 5ae:	0e 94 02 02 	call	0x404	; 0x404 <EEPROM_read>
 5b2:	1f 92       	push	r1
 5b4:	8f 93       	push	r24
 5b6:	ff 92       	push	r15
 5b8:	ef 92       	push	r14
 5ba:	1f 93       	push	r17
 5bc:	0f 93       	push	r16
 5be:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <sprintf>
				lcd_puts(numToString);
 5c2:	c8 01       	movw	r24, r16
 5c4:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
 5c8:	8d b7       	in	r24, 0x3d	; 61
 5ca:	9e b7       	in	r25, 0x3e	; 62
 5cc:	0c 96       	adiw	r24, 0x0c	; 12
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	9e bf       	out	0x3e, r25	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	8d bf       	out	0x3d, r24	; 61
 5d8:	56 cf       	rjmp	.-340    	; 0x486 <__stack+0x27>
			{
				contValores = 0;
			}
		}
		
		else if (lectura == 14 && sensingFlag == 1)
 5da:	8e 30       	cpi	r24, 0x0E	; 14
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <__stack+0x181>
 5de:	53 cf       	rjmp	.-346    	; 0x486 <__stack+0x27>
 5e0:	c1 30       	cpi	r28, 0x01	; 1
 5e2:	d1 05       	cpc	r29, r1
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <__stack+0x189>
 5e6:	4f cf       	rjmp	.-354    	; 0x486 <__stack+0x27>
		{
			
			contValores++;
 5e8:	9f ef       	ldi	r25, 0xFF	; 255
 5ea:	c9 1a       	sub	r12, r25
 5ec:	d9 0a       	sbc	r13, r25
			if (contValores<=contEP)
 5ee:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
 5f2:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <__data_end+0x1>
 5f6:	8c 15       	cp	r24, r12
 5f8:	9d 05       	cpc	r25, r13
 5fa:	94 f1       	brlt	.+100    	; 0x660 <__stack+0x201>
			{
				lcd_gotoxy(0,1);
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	0e 94 98 00 	call	0x130	; 0x130 <lcd_gotoxy>
				lcd_puts("                ");
 604:	8c e9       	ldi	r24, 0x9C	; 156
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				lcd_gotoxy(0,1);
 60c:	61 e0       	ldi	r22, 0x01	; 1
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	0e 94 98 00 	call	0x130	; 0x130 <lcd_gotoxy>
				sprintf(numToString,"%d",contValores);
 614:	df 92       	push	r13
 616:	cf 92       	push	r12
 618:	ff 92       	push	r15
 61a:	ef 92       	push	r14
 61c:	1f 93       	push	r17
 61e:	0f 93       	push	r16
 620:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <sprintf>
				lcd_puts(numToString);
 624:	c8 01       	movw	r24, r16
 626:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				lcd_puts("   ");
 62a:	89 ea       	ldi	r24, 0xA9	; 169
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
				sprintf(numToString,"%d",EEPROM_read(contValores));
 632:	c6 01       	movw	r24, r12
 634:	0e 94 02 02 	call	0x404	; 0x404 <EEPROM_read>
 638:	1f 92       	push	r1
 63a:	8f 93       	push	r24
 63c:	ff 92       	push	r15
 63e:	ef 92       	push	r14
 640:	1f 93       	push	r17
 642:	0f 93       	push	r16
 644:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <sprintf>
				lcd_puts(numToString);
 648:	c8 01       	movw	r24, r16
 64a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
 64e:	8d b7       	in	r24, 0x3d	; 61
 650:	9e b7       	in	r25, 0x3e	; 62
 652:	0c 96       	adiw	r24, 0x0c	; 12
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	f8 94       	cli
 658:	9e bf       	out	0x3e, r25	; 62
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	8d bf       	out	0x3d, r24	; 61
 65e:	13 cf       	rjmp	.-474    	; 0x486 <__stack+0x27>
			}
			else
			{
				contValores = contEP;
 660:	c0 90 ae 00 	lds	r12, 0x00AE	; 0x8000ae <__data_end>
 664:	d0 90 af 00 	lds	r13, 0x00AF	; 0x8000af <__data_end+0x1>
 668:	0e cf       	rjmp	.-484    	; 0x486 <__stack+0x27>

0000066a <__divsf3>:
 66a:	0e 94 49 03 	call	0x692	; 0x692 <__divsf3x>
 66e:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_round>
 672:	0e 94 2a 04 	call	0x854	; 0x854 <__fp_pscB>
 676:	58 f0       	brcs	.+22     	; 0x68e <__divsf3+0x24>
 678:	0e 94 23 04 	call	0x846	; 0x846 <__fp_pscA>
 67c:	40 f0       	brcs	.+16     	; 0x68e <__divsf3+0x24>
 67e:	29 f4       	brne	.+10     	; 0x68a <__divsf3+0x20>
 680:	5f 3f       	cpi	r21, 0xFF	; 255
 682:	29 f0       	breq	.+10     	; 0x68e <__divsf3+0x24>
 684:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_inf>
 688:	51 11       	cpse	r21, r1
 68a:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_szero>
 68e:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_nan>

00000692 <__divsf3x>:
 692:	0e 94 42 04 	call	0x884	; 0x884 <__fp_split3>
 696:	68 f3       	brcs	.-38     	; 0x672 <__divsf3+0x8>

00000698 <__divsf3_pse>:
 698:	99 23       	and	r25, r25
 69a:	b1 f3       	breq	.-20     	; 0x688 <__divsf3+0x1e>
 69c:	55 23       	and	r21, r21
 69e:	91 f3       	breq	.-28     	; 0x684 <__divsf3+0x1a>
 6a0:	95 1b       	sub	r25, r21
 6a2:	55 0b       	sbc	r21, r21
 6a4:	bb 27       	eor	r27, r27
 6a6:	aa 27       	eor	r26, r26
 6a8:	62 17       	cp	r22, r18
 6aa:	73 07       	cpc	r23, r19
 6ac:	84 07       	cpc	r24, r20
 6ae:	38 f0       	brcs	.+14     	; 0x6be <__divsf3_pse+0x26>
 6b0:	9f 5f       	subi	r25, 0xFF	; 255
 6b2:	5f 4f       	sbci	r21, 0xFF	; 255
 6b4:	22 0f       	add	r18, r18
 6b6:	33 1f       	adc	r19, r19
 6b8:	44 1f       	adc	r20, r20
 6ba:	aa 1f       	adc	r26, r26
 6bc:	a9 f3       	breq	.-22     	; 0x6a8 <__divsf3_pse+0x10>
 6be:	35 d0       	rcall	.+106    	; 0x72a <__divsf3_pse+0x92>
 6c0:	0e 2e       	mov	r0, r30
 6c2:	3a f0       	brmi	.+14     	; 0x6d2 <__divsf3_pse+0x3a>
 6c4:	e0 e8       	ldi	r30, 0x80	; 128
 6c6:	32 d0       	rcall	.+100    	; 0x72c <__divsf3_pse+0x94>
 6c8:	91 50       	subi	r25, 0x01	; 1
 6ca:	50 40       	sbci	r21, 0x00	; 0
 6cc:	e6 95       	lsr	r30
 6ce:	00 1c       	adc	r0, r0
 6d0:	ca f7       	brpl	.-14     	; 0x6c4 <__divsf3_pse+0x2c>
 6d2:	2b d0       	rcall	.+86     	; 0x72a <__divsf3_pse+0x92>
 6d4:	fe 2f       	mov	r31, r30
 6d6:	29 d0       	rcall	.+82     	; 0x72a <__divsf3_pse+0x92>
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	bb 1f       	adc	r27, r27
 6e0:	26 17       	cp	r18, r22
 6e2:	37 07       	cpc	r19, r23
 6e4:	48 07       	cpc	r20, r24
 6e6:	ab 07       	cpc	r26, r27
 6e8:	b0 e8       	ldi	r27, 0x80	; 128
 6ea:	09 f0       	breq	.+2      	; 0x6ee <__divsf3_pse+0x56>
 6ec:	bb 0b       	sbc	r27, r27
 6ee:	80 2d       	mov	r24, r0
 6f0:	bf 01       	movw	r22, r30
 6f2:	ff 27       	eor	r31, r31
 6f4:	93 58       	subi	r25, 0x83	; 131
 6f6:	5f 4f       	sbci	r21, 0xFF	; 255
 6f8:	3a f0       	brmi	.+14     	; 0x708 <__divsf3_pse+0x70>
 6fa:	9e 3f       	cpi	r25, 0xFE	; 254
 6fc:	51 05       	cpc	r21, r1
 6fe:	78 f0       	brcs	.+30     	; 0x71e <__divsf3_pse+0x86>
 700:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_inf>
 704:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_szero>
 708:	5f 3f       	cpi	r21, 0xFF	; 255
 70a:	e4 f3       	brlt	.-8      	; 0x704 <__divsf3_pse+0x6c>
 70c:	98 3e       	cpi	r25, 0xE8	; 232
 70e:	d4 f3       	brlt	.-12     	; 0x704 <__divsf3_pse+0x6c>
 710:	86 95       	lsr	r24
 712:	77 95       	ror	r23
 714:	67 95       	ror	r22
 716:	b7 95       	ror	r27
 718:	f7 95       	ror	r31
 71a:	9f 5f       	subi	r25, 0xFF	; 255
 71c:	c9 f7       	brne	.-14     	; 0x710 <__divsf3_pse+0x78>
 71e:	88 0f       	add	r24, r24
 720:	91 1d       	adc	r25, r1
 722:	96 95       	lsr	r25
 724:	87 95       	ror	r24
 726:	97 f9       	bld	r25, 7
 728:	08 95       	ret
 72a:	e1 e0       	ldi	r30, 0x01	; 1
 72c:	66 0f       	add	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	88 1f       	adc	r24, r24
 732:	bb 1f       	adc	r27, r27
 734:	62 17       	cp	r22, r18
 736:	73 07       	cpc	r23, r19
 738:	84 07       	cpc	r24, r20
 73a:	ba 07       	cpc	r27, r26
 73c:	20 f0       	brcs	.+8      	; 0x746 <__divsf3_pse+0xae>
 73e:	62 1b       	sub	r22, r18
 740:	73 0b       	sbc	r23, r19
 742:	84 0b       	sbc	r24, r20
 744:	ba 0b       	sbc	r27, r26
 746:	ee 1f       	adc	r30, r30
 748:	88 f7       	brcc	.-30     	; 0x72c <__divsf3_pse+0x94>
 74a:	e0 95       	com	r30
 74c:	08 95       	ret

0000074e <__fixsfsi>:
 74e:	0e 94 ae 03 	call	0x75c	; 0x75c <__fixunssfsi>
 752:	68 94       	set
 754:	b1 11       	cpse	r27, r1
 756:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_szero>
 75a:	08 95       	ret

0000075c <__fixunssfsi>:
 75c:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_splitA>
 760:	88 f0       	brcs	.+34     	; 0x784 <__fixunssfsi+0x28>
 762:	9f 57       	subi	r25, 0x7F	; 127
 764:	98 f0       	brcs	.+38     	; 0x78c <__fixunssfsi+0x30>
 766:	b9 2f       	mov	r27, r25
 768:	99 27       	eor	r25, r25
 76a:	b7 51       	subi	r27, 0x17	; 23
 76c:	b0 f0       	brcs	.+44     	; 0x79a <__fixunssfsi+0x3e>
 76e:	e1 f0       	breq	.+56     	; 0x7a8 <__fixunssfsi+0x4c>
 770:	66 0f       	add	r22, r22
 772:	77 1f       	adc	r23, r23
 774:	88 1f       	adc	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	1a f0       	brmi	.+6      	; 0x780 <__fixunssfsi+0x24>
 77a:	ba 95       	dec	r27
 77c:	c9 f7       	brne	.-14     	; 0x770 <__fixunssfsi+0x14>
 77e:	14 c0       	rjmp	.+40     	; 0x7a8 <__fixunssfsi+0x4c>
 780:	b1 30       	cpi	r27, 0x01	; 1
 782:	91 f0       	breq	.+36     	; 0x7a8 <__fixunssfsi+0x4c>
 784:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_zero>
 788:	b1 e0       	ldi	r27, 0x01	; 1
 78a:	08 95       	ret
 78c:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_zero>
 790:	67 2f       	mov	r22, r23
 792:	78 2f       	mov	r23, r24
 794:	88 27       	eor	r24, r24
 796:	b8 5f       	subi	r27, 0xF8	; 248
 798:	39 f0       	breq	.+14     	; 0x7a8 <__fixunssfsi+0x4c>
 79a:	b9 3f       	cpi	r27, 0xF9	; 249
 79c:	cc f3       	brlt	.-14     	; 0x790 <__fixunssfsi+0x34>
 79e:	86 95       	lsr	r24
 7a0:	77 95       	ror	r23
 7a2:	67 95       	ror	r22
 7a4:	b3 95       	inc	r27
 7a6:	d9 f7       	brne	.-10     	; 0x79e <__fixunssfsi+0x42>
 7a8:	3e f4       	brtc	.+14     	; 0x7b8 <__fixunssfsi+0x5c>
 7aa:	90 95       	com	r25
 7ac:	80 95       	com	r24
 7ae:	70 95       	com	r23
 7b0:	61 95       	neg	r22
 7b2:	7f 4f       	sbci	r23, 0xFF	; 255
 7b4:	8f 4f       	sbci	r24, 0xFF	; 255
 7b6:	9f 4f       	sbci	r25, 0xFF	; 255
 7b8:	08 95       	ret

000007ba <__floatunsisf>:
 7ba:	e8 94       	clt
 7bc:	09 c0       	rjmp	.+18     	; 0x7d0 <__floatsisf+0x12>

000007be <__floatsisf>:
 7be:	97 fb       	bst	r25, 7
 7c0:	3e f4       	brtc	.+14     	; 0x7d0 <__floatsisf+0x12>
 7c2:	90 95       	com	r25
 7c4:	80 95       	com	r24
 7c6:	70 95       	com	r23
 7c8:	61 95       	neg	r22
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	99 23       	and	r25, r25
 7d2:	a9 f0       	breq	.+42     	; 0x7fe <__floatsisf+0x40>
 7d4:	f9 2f       	mov	r31, r25
 7d6:	96 e9       	ldi	r25, 0x96	; 150
 7d8:	bb 27       	eor	r27, r27
 7da:	93 95       	inc	r25
 7dc:	f6 95       	lsr	r31
 7de:	87 95       	ror	r24
 7e0:	77 95       	ror	r23
 7e2:	67 95       	ror	r22
 7e4:	b7 95       	ror	r27
 7e6:	f1 11       	cpse	r31, r1
 7e8:	f8 cf       	rjmp	.-16     	; 0x7da <__floatsisf+0x1c>
 7ea:	fa f4       	brpl	.+62     	; 0x82a <__floatsisf+0x6c>
 7ec:	bb 0f       	add	r27, r27
 7ee:	11 f4       	brne	.+4      	; 0x7f4 <__floatsisf+0x36>
 7f0:	60 ff       	sbrs	r22, 0
 7f2:	1b c0       	rjmp	.+54     	; 0x82a <__floatsisf+0x6c>
 7f4:	6f 5f       	subi	r22, 0xFF	; 255
 7f6:	7f 4f       	sbci	r23, 0xFF	; 255
 7f8:	8f 4f       	sbci	r24, 0xFF	; 255
 7fa:	9f 4f       	sbci	r25, 0xFF	; 255
 7fc:	16 c0       	rjmp	.+44     	; 0x82a <__floatsisf+0x6c>
 7fe:	88 23       	and	r24, r24
 800:	11 f0       	breq	.+4      	; 0x806 <__floatsisf+0x48>
 802:	96 e9       	ldi	r25, 0x96	; 150
 804:	11 c0       	rjmp	.+34     	; 0x828 <__floatsisf+0x6a>
 806:	77 23       	and	r23, r23
 808:	21 f0       	breq	.+8      	; 0x812 <__floatsisf+0x54>
 80a:	9e e8       	ldi	r25, 0x8E	; 142
 80c:	87 2f       	mov	r24, r23
 80e:	76 2f       	mov	r23, r22
 810:	05 c0       	rjmp	.+10     	; 0x81c <__floatsisf+0x5e>
 812:	66 23       	and	r22, r22
 814:	71 f0       	breq	.+28     	; 0x832 <__floatsisf+0x74>
 816:	96 e8       	ldi	r25, 0x86	; 134
 818:	86 2f       	mov	r24, r22
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	2a f0       	brmi	.+10     	; 0x82a <__floatsisf+0x6c>
 820:	9a 95       	dec	r25
 822:	66 0f       	add	r22, r22
 824:	77 1f       	adc	r23, r23
 826:	88 1f       	adc	r24, r24
 828:	da f7       	brpl	.-10     	; 0x820 <__floatsisf+0x62>
 82a:	88 0f       	add	r24, r24
 82c:	96 95       	lsr	r25
 82e:	87 95       	ror	r24
 830:	97 f9       	bld	r25, 7
 832:	08 95       	ret

00000834 <__fp_inf>:
 834:	97 f9       	bld	r25, 7
 836:	9f 67       	ori	r25, 0x7F	; 127
 838:	80 e8       	ldi	r24, 0x80	; 128
 83a:	70 e0       	ldi	r23, 0x00	; 0
 83c:	60 e0       	ldi	r22, 0x00	; 0
 83e:	08 95       	ret

00000840 <__fp_nan>:
 840:	9f ef       	ldi	r25, 0xFF	; 255
 842:	80 ec       	ldi	r24, 0xC0	; 192
 844:	08 95       	ret

00000846 <__fp_pscA>:
 846:	00 24       	eor	r0, r0
 848:	0a 94       	dec	r0
 84a:	16 16       	cp	r1, r22
 84c:	17 06       	cpc	r1, r23
 84e:	18 06       	cpc	r1, r24
 850:	09 06       	cpc	r0, r25
 852:	08 95       	ret

00000854 <__fp_pscB>:
 854:	00 24       	eor	r0, r0
 856:	0a 94       	dec	r0
 858:	12 16       	cp	r1, r18
 85a:	13 06       	cpc	r1, r19
 85c:	14 06       	cpc	r1, r20
 85e:	05 06       	cpc	r0, r21
 860:	08 95       	ret

00000862 <__fp_round>:
 862:	09 2e       	mov	r0, r25
 864:	03 94       	inc	r0
 866:	00 0c       	add	r0, r0
 868:	11 f4       	brne	.+4      	; 0x86e <__fp_round+0xc>
 86a:	88 23       	and	r24, r24
 86c:	52 f0       	brmi	.+20     	; 0x882 <__fp_round+0x20>
 86e:	bb 0f       	add	r27, r27
 870:	40 f4       	brcc	.+16     	; 0x882 <__fp_round+0x20>
 872:	bf 2b       	or	r27, r31
 874:	11 f4       	brne	.+4      	; 0x87a <__fp_round+0x18>
 876:	60 ff       	sbrs	r22, 0
 878:	04 c0       	rjmp	.+8      	; 0x882 <__fp_round+0x20>
 87a:	6f 5f       	subi	r22, 0xFF	; 255
 87c:	7f 4f       	sbci	r23, 0xFF	; 255
 87e:	8f 4f       	sbci	r24, 0xFF	; 255
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	08 95       	ret

00000884 <__fp_split3>:
 884:	57 fd       	sbrc	r21, 7
 886:	90 58       	subi	r25, 0x80	; 128
 888:	44 0f       	add	r20, r20
 88a:	55 1f       	adc	r21, r21
 88c:	59 f0       	breq	.+22     	; 0x8a4 <__fp_splitA+0x10>
 88e:	5f 3f       	cpi	r21, 0xFF	; 255
 890:	71 f0       	breq	.+28     	; 0x8ae <__fp_splitA+0x1a>
 892:	47 95       	ror	r20

00000894 <__fp_splitA>:
 894:	88 0f       	add	r24, r24
 896:	97 fb       	bst	r25, 7
 898:	99 1f       	adc	r25, r25
 89a:	61 f0       	breq	.+24     	; 0x8b4 <__fp_splitA+0x20>
 89c:	9f 3f       	cpi	r25, 0xFF	; 255
 89e:	79 f0       	breq	.+30     	; 0x8be <__fp_splitA+0x2a>
 8a0:	87 95       	ror	r24
 8a2:	08 95       	ret
 8a4:	12 16       	cp	r1, r18
 8a6:	13 06       	cpc	r1, r19
 8a8:	14 06       	cpc	r1, r20
 8aa:	55 1f       	adc	r21, r21
 8ac:	f2 cf       	rjmp	.-28     	; 0x892 <__fp_split3+0xe>
 8ae:	46 95       	lsr	r20
 8b0:	f1 df       	rcall	.-30     	; 0x894 <__fp_splitA>
 8b2:	08 c0       	rjmp	.+16     	; 0x8c4 <__fp_splitA+0x30>
 8b4:	16 16       	cp	r1, r22
 8b6:	17 06       	cpc	r1, r23
 8b8:	18 06       	cpc	r1, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	f1 cf       	rjmp	.-30     	; 0x8a0 <__fp_splitA+0xc>
 8be:	86 95       	lsr	r24
 8c0:	71 05       	cpc	r23, r1
 8c2:	61 05       	cpc	r22, r1
 8c4:	08 94       	sec
 8c6:	08 95       	ret

000008c8 <__fp_zero>:
 8c8:	e8 94       	clt

000008ca <__fp_szero>:
 8ca:	bb 27       	eor	r27, r27
 8cc:	66 27       	eor	r22, r22
 8ce:	77 27       	eor	r23, r23
 8d0:	cb 01       	movw	r24, r22
 8d2:	97 f9       	bld	r25, 7
 8d4:	08 95       	ret

000008d6 <__mulsf3>:
 8d6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulsf3x>
 8da:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_round>
 8de:	0e 94 23 04 	call	0x846	; 0x846 <__fp_pscA>
 8e2:	38 f0       	brcs	.+14     	; 0x8f2 <__mulsf3+0x1c>
 8e4:	0e 94 2a 04 	call	0x854	; 0x854 <__fp_pscB>
 8e8:	20 f0       	brcs	.+8      	; 0x8f2 <__mulsf3+0x1c>
 8ea:	95 23       	and	r25, r21
 8ec:	11 f0       	breq	.+4      	; 0x8f2 <__mulsf3+0x1c>
 8ee:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_inf>
 8f2:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_nan>
 8f6:	11 24       	eor	r1, r1
 8f8:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_szero>

000008fc <__mulsf3x>:
 8fc:	0e 94 42 04 	call	0x884	; 0x884 <__fp_split3>
 900:	70 f3       	brcs	.-36     	; 0x8de <__mulsf3+0x8>

00000902 <__mulsf3_pse>:
 902:	95 9f       	mul	r25, r21
 904:	c1 f3       	breq	.-16     	; 0x8f6 <__mulsf3+0x20>
 906:	95 0f       	add	r25, r21
 908:	50 e0       	ldi	r21, 0x00	; 0
 90a:	55 1f       	adc	r21, r21
 90c:	62 9f       	mul	r22, r18
 90e:	f0 01       	movw	r30, r0
 910:	72 9f       	mul	r23, r18
 912:	bb 27       	eor	r27, r27
 914:	f0 0d       	add	r31, r0
 916:	b1 1d       	adc	r27, r1
 918:	63 9f       	mul	r22, r19
 91a:	aa 27       	eor	r26, r26
 91c:	f0 0d       	add	r31, r0
 91e:	b1 1d       	adc	r27, r1
 920:	aa 1f       	adc	r26, r26
 922:	64 9f       	mul	r22, r20
 924:	66 27       	eor	r22, r22
 926:	b0 0d       	add	r27, r0
 928:	a1 1d       	adc	r26, r1
 92a:	66 1f       	adc	r22, r22
 92c:	82 9f       	mul	r24, r18
 92e:	22 27       	eor	r18, r18
 930:	b0 0d       	add	r27, r0
 932:	a1 1d       	adc	r26, r1
 934:	62 1f       	adc	r22, r18
 936:	73 9f       	mul	r23, r19
 938:	b0 0d       	add	r27, r0
 93a:	a1 1d       	adc	r26, r1
 93c:	62 1f       	adc	r22, r18
 93e:	83 9f       	mul	r24, r19
 940:	a0 0d       	add	r26, r0
 942:	61 1d       	adc	r22, r1
 944:	22 1f       	adc	r18, r18
 946:	74 9f       	mul	r23, r20
 948:	33 27       	eor	r19, r19
 94a:	a0 0d       	add	r26, r0
 94c:	61 1d       	adc	r22, r1
 94e:	23 1f       	adc	r18, r19
 950:	84 9f       	mul	r24, r20
 952:	60 0d       	add	r22, r0
 954:	21 1d       	adc	r18, r1
 956:	82 2f       	mov	r24, r18
 958:	76 2f       	mov	r23, r22
 95a:	6a 2f       	mov	r22, r26
 95c:	11 24       	eor	r1, r1
 95e:	9f 57       	subi	r25, 0x7F	; 127
 960:	50 40       	sbci	r21, 0x00	; 0
 962:	9a f0       	brmi	.+38     	; 0x98a <__mulsf3_pse+0x88>
 964:	f1 f0       	breq	.+60     	; 0x9a2 <__mulsf3_pse+0xa0>
 966:	88 23       	and	r24, r24
 968:	4a f0       	brmi	.+18     	; 0x97c <__mulsf3_pse+0x7a>
 96a:	ee 0f       	add	r30, r30
 96c:	ff 1f       	adc	r31, r31
 96e:	bb 1f       	adc	r27, r27
 970:	66 1f       	adc	r22, r22
 972:	77 1f       	adc	r23, r23
 974:	88 1f       	adc	r24, r24
 976:	91 50       	subi	r25, 0x01	; 1
 978:	50 40       	sbci	r21, 0x00	; 0
 97a:	a9 f7       	brne	.-22     	; 0x966 <__mulsf3_pse+0x64>
 97c:	9e 3f       	cpi	r25, 0xFE	; 254
 97e:	51 05       	cpc	r21, r1
 980:	80 f0       	brcs	.+32     	; 0x9a2 <__mulsf3_pse+0xa0>
 982:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_inf>
 986:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_szero>
 98a:	5f 3f       	cpi	r21, 0xFF	; 255
 98c:	e4 f3       	brlt	.-8      	; 0x986 <__mulsf3_pse+0x84>
 98e:	98 3e       	cpi	r25, 0xE8	; 232
 990:	d4 f3       	brlt	.-12     	; 0x986 <__mulsf3_pse+0x84>
 992:	86 95       	lsr	r24
 994:	77 95       	ror	r23
 996:	67 95       	ror	r22
 998:	b7 95       	ror	r27
 99a:	f7 95       	ror	r31
 99c:	e7 95       	ror	r30
 99e:	9f 5f       	subi	r25, 0xFF	; 255
 9a0:	c1 f7       	brne	.-16     	; 0x992 <__mulsf3_pse+0x90>
 9a2:	fe 2b       	or	r31, r30
 9a4:	88 0f       	add	r24, r24
 9a6:	91 1d       	adc	r25, r1
 9a8:	96 95       	lsr	r25
 9aa:	87 95       	ror	r24
 9ac:	97 f9       	bld	r25, 7
 9ae:	08 95       	ret

000009b0 <sprintf>:
 9b0:	ae e0       	ldi	r26, 0x0E	; 14
 9b2:	b0 e0       	ldi	r27, 0x00	; 0
 9b4:	ee ed       	ldi	r30, 0xDE	; 222
 9b6:	f4 e0       	ldi	r31, 0x04	; 4
 9b8:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__prologue_saves__+0x1c>
 9bc:	0d 89       	ldd	r16, Y+21	; 0x15
 9be:	1e 89       	ldd	r17, Y+22	; 0x16
 9c0:	86 e0       	ldi	r24, 0x06	; 6
 9c2:	8c 83       	std	Y+4, r24	; 0x04
 9c4:	1a 83       	std	Y+2, r17	; 0x02
 9c6:	09 83       	std	Y+1, r16	; 0x01
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	9f e7       	ldi	r25, 0x7F	; 127
 9cc:	9e 83       	std	Y+6, r25	; 0x06
 9ce:	8d 83       	std	Y+5, r24	; 0x05
 9d0:	ae 01       	movw	r20, r28
 9d2:	47 5e       	subi	r20, 0xE7	; 231
 9d4:	5f 4f       	sbci	r21, 0xFF	; 255
 9d6:	6f 89       	ldd	r22, Y+23	; 0x17
 9d8:	78 8d       	ldd	r23, Y+24	; 0x18
 9da:	ce 01       	movw	r24, r28
 9dc:	01 96       	adiw	r24, 0x01	; 1
 9de:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <vfprintf>
 9e2:	ef 81       	ldd	r30, Y+7	; 0x07
 9e4:	f8 85       	ldd	r31, Y+8	; 0x08
 9e6:	e0 0f       	add	r30, r16
 9e8:	f1 1f       	adc	r31, r17
 9ea:	10 82       	st	Z, r1
 9ec:	2e 96       	adiw	r28, 0x0e	; 14
 9ee:	e4 e0       	ldi	r30, 0x04	; 4
 9f0:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__epilogue_restores__+0x1c>

000009f4 <vfprintf>:
 9f4:	ab e0       	ldi	r26, 0x0B	; 11
 9f6:	b0 e0       	ldi	r27, 0x00	; 0
 9f8:	e0 e0       	ldi	r30, 0x00	; 0
 9fa:	f5 e0       	ldi	r31, 0x05	; 5
 9fc:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__prologue_saves__>
 a00:	6c 01       	movw	r12, r24
 a02:	7b 01       	movw	r14, r22
 a04:	8a 01       	movw	r16, r20
 a06:	fc 01       	movw	r30, r24
 a08:	17 82       	std	Z+7, r1	; 0x07
 a0a:	16 82       	std	Z+6, r1	; 0x06
 a0c:	83 81       	ldd	r24, Z+3	; 0x03
 a0e:	81 ff       	sbrs	r24, 1
 a10:	cc c1       	rjmp	.+920    	; 0xdaa <vfprintf+0x3b6>
 a12:	ce 01       	movw	r24, r28
 a14:	01 96       	adiw	r24, 0x01	; 1
 a16:	3c 01       	movw	r6, r24
 a18:	f6 01       	movw	r30, r12
 a1a:	93 81       	ldd	r25, Z+3	; 0x03
 a1c:	f7 01       	movw	r30, r14
 a1e:	93 fd       	sbrc	r25, 3
 a20:	85 91       	lpm	r24, Z+
 a22:	93 ff       	sbrs	r25, 3
 a24:	81 91       	ld	r24, Z+
 a26:	7f 01       	movw	r14, r30
 a28:	88 23       	and	r24, r24
 a2a:	09 f4       	brne	.+2      	; 0xa2e <vfprintf+0x3a>
 a2c:	ba c1       	rjmp	.+884    	; 0xda2 <vfprintf+0x3ae>
 a2e:	85 32       	cpi	r24, 0x25	; 37
 a30:	39 f4       	brne	.+14     	; 0xa40 <vfprintf+0x4c>
 a32:	93 fd       	sbrc	r25, 3
 a34:	85 91       	lpm	r24, Z+
 a36:	93 ff       	sbrs	r25, 3
 a38:	81 91       	ld	r24, Z+
 a3a:	7f 01       	movw	r14, r30
 a3c:	85 32       	cpi	r24, 0x25	; 37
 a3e:	29 f4       	brne	.+10     	; 0xa4a <vfprintf+0x56>
 a40:	b6 01       	movw	r22, r12
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 f1 06 	call	0xde2	; 0xde2 <fputc>
 a48:	e7 cf       	rjmp	.-50     	; 0xa18 <vfprintf+0x24>
 a4a:	91 2c       	mov	r9, r1
 a4c:	21 2c       	mov	r2, r1
 a4e:	31 2c       	mov	r3, r1
 a50:	ff e1       	ldi	r31, 0x1F	; 31
 a52:	f3 15       	cp	r31, r3
 a54:	d8 f0       	brcs	.+54     	; 0xa8c <vfprintf+0x98>
 a56:	8b 32       	cpi	r24, 0x2B	; 43
 a58:	79 f0       	breq	.+30     	; 0xa78 <vfprintf+0x84>
 a5a:	38 f4       	brcc	.+14     	; 0xa6a <vfprintf+0x76>
 a5c:	80 32       	cpi	r24, 0x20	; 32
 a5e:	79 f0       	breq	.+30     	; 0xa7e <vfprintf+0x8a>
 a60:	83 32       	cpi	r24, 0x23	; 35
 a62:	a1 f4       	brne	.+40     	; 0xa8c <vfprintf+0x98>
 a64:	23 2d       	mov	r18, r3
 a66:	20 61       	ori	r18, 0x10	; 16
 a68:	1d c0       	rjmp	.+58     	; 0xaa4 <vfprintf+0xb0>
 a6a:	8d 32       	cpi	r24, 0x2D	; 45
 a6c:	61 f0       	breq	.+24     	; 0xa86 <vfprintf+0x92>
 a6e:	80 33       	cpi	r24, 0x30	; 48
 a70:	69 f4       	brne	.+26     	; 0xa8c <vfprintf+0x98>
 a72:	23 2d       	mov	r18, r3
 a74:	21 60       	ori	r18, 0x01	; 1
 a76:	16 c0       	rjmp	.+44     	; 0xaa4 <vfprintf+0xb0>
 a78:	83 2d       	mov	r24, r3
 a7a:	82 60       	ori	r24, 0x02	; 2
 a7c:	38 2e       	mov	r3, r24
 a7e:	e3 2d       	mov	r30, r3
 a80:	e4 60       	ori	r30, 0x04	; 4
 a82:	3e 2e       	mov	r3, r30
 a84:	2a c0       	rjmp	.+84     	; 0xada <vfprintf+0xe6>
 a86:	f3 2d       	mov	r31, r3
 a88:	f8 60       	ori	r31, 0x08	; 8
 a8a:	1d c0       	rjmp	.+58     	; 0xac6 <vfprintf+0xd2>
 a8c:	37 fc       	sbrc	r3, 7
 a8e:	2d c0       	rjmp	.+90     	; 0xaea <vfprintf+0xf6>
 a90:	20 ed       	ldi	r18, 0xD0	; 208
 a92:	28 0f       	add	r18, r24
 a94:	2a 30       	cpi	r18, 0x0A	; 10
 a96:	40 f0       	brcs	.+16     	; 0xaa8 <vfprintf+0xb4>
 a98:	8e 32       	cpi	r24, 0x2E	; 46
 a9a:	b9 f4       	brne	.+46     	; 0xaca <vfprintf+0xd6>
 a9c:	36 fc       	sbrc	r3, 6
 a9e:	81 c1       	rjmp	.+770    	; 0xda2 <vfprintf+0x3ae>
 aa0:	23 2d       	mov	r18, r3
 aa2:	20 64       	ori	r18, 0x40	; 64
 aa4:	32 2e       	mov	r3, r18
 aa6:	19 c0       	rjmp	.+50     	; 0xada <vfprintf+0xe6>
 aa8:	36 fe       	sbrs	r3, 6
 aaa:	06 c0       	rjmp	.+12     	; 0xab8 <vfprintf+0xc4>
 aac:	8a e0       	ldi	r24, 0x0A	; 10
 aae:	98 9e       	mul	r9, r24
 ab0:	20 0d       	add	r18, r0
 ab2:	11 24       	eor	r1, r1
 ab4:	92 2e       	mov	r9, r18
 ab6:	11 c0       	rjmp	.+34     	; 0xada <vfprintf+0xe6>
 ab8:	ea e0       	ldi	r30, 0x0A	; 10
 aba:	2e 9e       	mul	r2, r30
 abc:	20 0d       	add	r18, r0
 abe:	11 24       	eor	r1, r1
 ac0:	22 2e       	mov	r2, r18
 ac2:	f3 2d       	mov	r31, r3
 ac4:	f0 62       	ori	r31, 0x20	; 32
 ac6:	3f 2e       	mov	r3, r31
 ac8:	08 c0       	rjmp	.+16     	; 0xada <vfprintf+0xe6>
 aca:	8c 36       	cpi	r24, 0x6C	; 108
 acc:	21 f4       	brne	.+8      	; 0xad6 <vfprintf+0xe2>
 ace:	83 2d       	mov	r24, r3
 ad0:	80 68       	ori	r24, 0x80	; 128
 ad2:	38 2e       	mov	r3, r24
 ad4:	02 c0       	rjmp	.+4      	; 0xada <vfprintf+0xe6>
 ad6:	88 36       	cpi	r24, 0x68	; 104
 ad8:	41 f4       	brne	.+16     	; 0xaea <vfprintf+0xf6>
 ada:	f7 01       	movw	r30, r14
 adc:	93 fd       	sbrc	r25, 3
 ade:	85 91       	lpm	r24, Z+
 ae0:	93 ff       	sbrs	r25, 3
 ae2:	81 91       	ld	r24, Z+
 ae4:	7f 01       	movw	r14, r30
 ae6:	81 11       	cpse	r24, r1
 ae8:	b3 cf       	rjmp	.-154    	; 0xa50 <vfprintf+0x5c>
 aea:	98 2f       	mov	r25, r24
 aec:	9f 7d       	andi	r25, 0xDF	; 223
 aee:	95 54       	subi	r25, 0x45	; 69
 af0:	93 30       	cpi	r25, 0x03	; 3
 af2:	28 f4       	brcc	.+10     	; 0xafe <vfprintf+0x10a>
 af4:	0c 5f       	subi	r16, 0xFC	; 252
 af6:	1f 4f       	sbci	r17, 0xFF	; 255
 af8:	9f e3       	ldi	r25, 0x3F	; 63
 afa:	99 83       	std	Y+1, r25	; 0x01
 afc:	0d c0       	rjmp	.+26     	; 0xb18 <vfprintf+0x124>
 afe:	83 36       	cpi	r24, 0x63	; 99
 b00:	31 f0       	breq	.+12     	; 0xb0e <vfprintf+0x11a>
 b02:	83 37       	cpi	r24, 0x73	; 115
 b04:	71 f0       	breq	.+28     	; 0xb22 <vfprintf+0x12e>
 b06:	83 35       	cpi	r24, 0x53	; 83
 b08:	09 f0       	breq	.+2      	; 0xb0c <vfprintf+0x118>
 b0a:	59 c0       	rjmp	.+178    	; 0xbbe <vfprintf+0x1ca>
 b0c:	21 c0       	rjmp	.+66     	; 0xb50 <vfprintf+0x15c>
 b0e:	f8 01       	movw	r30, r16
 b10:	80 81       	ld	r24, Z
 b12:	89 83       	std	Y+1, r24	; 0x01
 b14:	0e 5f       	subi	r16, 0xFE	; 254
 b16:	1f 4f       	sbci	r17, 0xFF	; 255
 b18:	88 24       	eor	r8, r8
 b1a:	83 94       	inc	r8
 b1c:	91 2c       	mov	r9, r1
 b1e:	53 01       	movw	r10, r6
 b20:	13 c0       	rjmp	.+38     	; 0xb48 <vfprintf+0x154>
 b22:	28 01       	movw	r4, r16
 b24:	f2 e0       	ldi	r31, 0x02	; 2
 b26:	4f 0e       	add	r4, r31
 b28:	51 1c       	adc	r5, r1
 b2a:	f8 01       	movw	r30, r16
 b2c:	a0 80       	ld	r10, Z
 b2e:	b1 80       	ldd	r11, Z+1	; 0x01
 b30:	36 fe       	sbrs	r3, 6
 b32:	03 c0       	rjmp	.+6      	; 0xb3a <vfprintf+0x146>
 b34:	69 2d       	mov	r22, r9
 b36:	70 e0       	ldi	r23, 0x00	; 0
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <vfprintf+0x14a>
 b3a:	6f ef       	ldi	r22, 0xFF	; 255
 b3c:	7f ef       	ldi	r23, 0xFF	; 255
 b3e:	c5 01       	movw	r24, r10
 b40:	0e 94 e6 06 	call	0xdcc	; 0xdcc <strnlen>
 b44:	4c 01       	movw	r8, r24
 b46:	82 01       	movw	r16, r4
 b48:	f3 2d       	mov	r31, r3
 b4a:	ff 77       	andi	r31, 0x7F	; 127
 b4c:	3f 2e       	mov	r3, r31
 b4e:	16 c0       	rjmp	.+44     	; 0xb7c <vfprintf+0x188>
 b50:	28 01       	movw	r4, r16
 b52:	22 e0       	ldi	r18, 0x02	; 2
 b54:	42 0e       	add	r4, r18
 b56:	51 1c       	adc	r5, r1
 b58:	f8 01       	movw	r30, r16
 b5a:	a0 80       	ld	r10, Z
 b5c:	b1 80       	ldd	r11, Z+1	; 0x01
 b5e:	36 fe       	sbrs	r3, 6
 b60:	03 c0       	rjmp	.+6      	; 0xb68 <vfprintf+0x174>
 b62:	69 2d       	mov	r22, r9
 b64:	70 e0       	ldi	r23, 0x00	; 0
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <vfprintf+0x178>
 b68:	6f ef       	ldi	r22, 0xFF	; 255
 b6a:	7f ef       	ldi	r23, 0xFF	; 255
 b6c:	c5 01       	movw	r24, r10
 b6e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <strnlen_P>
 b72:	4c 01       	movw	r8, r24
 b74:	f3 2d       	mov	r31, r3
 b76:	f0 68       	ori	r31, 0x80	; 128
 b78:	3f 2e       	mov	r3, r31
 b7a:	82 01       	movw	r16, r4
 b7c:	33 fc       	sbrc	r3, 3
 b7e:	1b c0       	rjmp	.+54     	; 0xbb6 <vfprintf+0x1c2>
 b80:	82 2d       	mov	r24, r2
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	88 16       	cp	r8, r24
 b86:	99 06       	cpc	r9, r25
 b88:	b0 f4       	brcc	.+44     	; 0xbb6 <vfprintf+0x1c2>
 b8a:	b6 01       	movw	r22, r12
 b8c:	80 e2       	ldi	r24, 0x20	; 32
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	0e 94 f1 06 	call	0xde2	; 0xde2 <fputc>
 b94:	2a 94       	dec	r2
 b96:	f4 cf       	rjmp	.-24     	; 0xb80 <vfprintf+0x18c>
 b98:	f5 01       	movw	r30, r10
 b9a:	37 fc       	sbrc	r3, 7
 b9c:	85 91       	lpm	r24, Z+
 b9e:	37 fe       	sbrs	r3, 7
 ba0:	81 91       	ld	r24, Z+
 ba2:	5f 01       	movw	r10, r30
 ba4:	b6 01       	movw	r22, r12
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	0e 94 f1 06 	call	0xde2	; 0xde2 <fputc>
 bac:	21 10       	cpse	r2, r1
 bae:	2a 94       	dec	r2
 bb0:	21 e0       	ldi	r18, 0x01	; 1
 bb2:	82 1a       	sub	r8, r18
 bb4:	91 08       	sbc	r9, r1
 bb6:	81 14       	cp	r8, r1
 bb8:	91 04       	cpc	r9, r1
 bba:	71 f7       	brne	.-36     	; 0xb98 <vfprintf+0x1a4>
 bbc:	e8 c0       	rjmp	.+464    	; 0xd8e <vfprintf+0x39a>
 bbe:	84 36       	cpi	r24, 0x64	; 100
 bc0:	11 f0       	breq	.+4      	; 0xbc6 <vfprintf+0x1d2>
 bc2:	89 36       	cpi	r24, 0x69	; 105
 bc4:	41 f5       	brne	.+80     	; 0xc16 <vfprintf+0x222>
 bc6:	f8 01       	movw	r30, r16
 bc8:	37 fe       	sbrs	r3, 7
 bca:	07 c0       	rjmp	.+14     	; 0xbda <vfprintf+0x1e6>
 bcc:	60 81       	ld	r22, Z
 bce:	71 81       	ldd	r23, Z+1	; 0x01
 bd0:	82 81       	ldd	r24, Z+2	; 0x02
 bd2:	93 81       	ldd	r25, Z+3	; 0x03
 bd4:	0c 5f       	subi	r16, 0xFC	; 252
 bd6:	1f 4f       	sbci	r17, 0xFF	; 255
 bd8:	08 c0       	rjmp	.+16     	; 0xbea <vfprintf+0x1f6>
 bda:	60 81       	ld	r22, Z
 bdc:	71 81       	ldd	r23, Z+1	; 0x01
 bde:	07 2e       	mov	r0, r23
 be0:	00 0c       	add	r0, r0
 be2:	88 0b       	sbc	r24, r24
 be4:	99 0b       	sbc	r25, r25
 be6:	0e 5f       	subi	r16, 0xFE	; 254
 be8:	1f 4f       	sbci	r17, 0xFF	; 255
 bea:	f3 2d       	mov	r31, r3
 bec:	ff 76       	andi	r31, 0x6F	; 111
 bee:	3f 2e       	mov	r3, r31
 bf0:	97 ff       	sbrs	r25, 7
 bf2:	09 c0       	rjmp	.+18     	; 0xc06 <vfprintf+0x212>
 bf4:	90 95       	com	r25
 bf6:	80 95       	com	r24
 bf8:	70 95       	com	r23
 bfa:	61 95       	neg	r22
 bfc:	7f 4f       	sbci	r23, 0xFF	; 255
 bfe:	8f 4f       	sbci	r24, 0xFF	; 255
 c00:	9f 4f       	sbci	r25, 0xFF	; 255
 c02:	f0 68       	ori	r31, 0x80	; 128
 c04:	3f 2e       	mov	r3, r31
 c06:	2a e0       	ldi	r18, 0x0A	; 10
 c08:	30 e0       	ldi	r19, 0x00	; 0
 c0a:	a3 01       	movw	r20, r6
 c0c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__ultoa_invert>
 c10:	88 2e       	mov	r8, r24
 c12:	86 18       	sub	r8, r6
 c14:	45 c0       	rjmp	.+138    	; 0xca0 <vfprintf+0x2ac>
 c16:	85 37       	cpi	r24, 0x75	; 117
 c18:	31 f4       	brne	.+12     	; 0xc26 <vfprintf+0x232>
 c1a:	23 2d       	mov	r18, r3
 c1c:	2f 7e       	andi	r18, 0xEF	; 239
 c1e:	b2 2e       	mov	r11, r18
 c20:	2a e0       	ldi	r18, 0x0A	; 10
 c22:	30 e0       	ldi	r19, 0x00	; 0
 c24:	25 c0       	rjmp	.+74     	; 0xc70 <vfprintf+0x27c>
 c26:	93 2d       	mov	r25, r3
 c28:	99 7f       	andi	r25, 0xF9	; 249
 c2a:	b9 2e       	mov	r11, r25
 c2c:	8f 36       	cpi	r24, 0x6F	; 111
 c2e:	c1 f0       	breq	.+48     	; 0xc60 <vfprintf+0x26c>
 c30:	18 f4       	brcc	.+6      	; 0xc38 <vfprintf+0x244>
 c32:	88 35       	cpi	r24, 0x58	; 88
 c34:	79 f0       	breq	.+30     	; 0xc54 <vfprintf+0x260>
 c36:	b5 c0       	rjmp	.+362    	; 0xda2 <vfprintf+0x3ae>
 c38:	80 37       	cpi	r24, 0x70	; 112
 c3a:	19 f0       	breq	.+6      	; 0xc42 <vfprintf+0x24e>
 c3c:	88 37       	cpi	r24, 0x78	; 120
 c3e:	21 f0       	breq	.+8      	; 0xc48 <vfprintf+0x254>
 c40:	b0 c0       	rjmp	.+352    	; 0xda2 <vfprintf+0x3ae>
 c42:	e9 2f       	mov	r30, r25
 c44:	e0 61       	ori	r30, 0x10	; 16
 c46:	be 2e       	mov	r11, r30
 c48:	b4 fe       	sbrs	r11, 4
 c4a:	0d c0       	rjmp	.+26     	; 0xc66 <vfprintf+0x272>
 c4c:	fb 2d       	mov	r31, r11
 c4e:	f4 60       	ori	r31, 0x04	; 4
 c50:	bf 2e       	mov	r11, r31
 c52:	09 c0       	rjmp	.+18     	; 0xc66 <vfprintf+0x272>
 c54:	34 fe       	sbrs	r3, 4
 c56:	0a c0       	rjmp	.+20     	; 0xc6c <vfprintf+0x278>
 c58:	29 2f       	mov	r18, r25
 c5a:	26 60       	ori	r18, 0x06	; 6
 c5c:	b2 2e       	mov	r11, r18
 c5e:	06 c0       	rjmp	.+12     	; 0xc6c <vfprintf+0x278>
 c60:	28 e0       	ldi	r18, 0x08	; 8
 c62:	30 e0       	ldi	r19, 0x00	; 0
 c64:	05 c0       	rjmp	.+10     	; 0xc70 <vfprintf+0x27c>
 c66:	20 e1       	ldi	r18, 0x10	; 16
 c68:	30 e0       	ldi	r19, 0x00	; 0
 c6a:	02 c0       	rjmp	.+4      	; 0xc70 <vfprintf+0x27c>
 c6c:	20 e1       	ldi	r18, 0x10	; 16
 c6e:	32 e0       	ldi	r19, 0x02	; 2
 c70:	f8 01       	movw	r30, r16
 c72:	b7 fe       	sbrs	r11, 7
 c74:	07 c0       	rjmp	.+14     	; 0xc84 <vfprintf+0x290>
 c76:	60 81       	ld	r22, Z
 c78:	71 81       	ldd	r23, Z+1	; 0x01
 c7a:	82 81       	ldd	r24, Z+2	; 0x02
 c7c:	93 81       	ldd	r25, Z+3	; 0x03
 c7e:	0c 5f       	subi	r16, 0xFC	; 252
 c80:	1f 4f       	sbci	r17, 0xFF	; 255
 c82:	06 c0       	rjmp	.+12     	; 0xc90 <vfprintf+0x29c>
 c84:	60 81       	ld	r22, Z
 c86:	71 81       	ldd	r23, Z+1	; 0x01
 c88:	80 e0       	ldi	r24, 0x00	; 0
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	0e 5f       	subi	r16, 0xFE	; 254
 c8e:	1f 4f       	sbci	r17, 0xFF	; 255
 c90:	a3 01       	movw	r20, r6
 c92:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__ultoa_invert>
 c96:	88 2e       	mov	r8, r24
 c98:	86 18       	sub	r8, r6
 c9a:	fb 2d       	mov	r31, r11
 c9c:	ff 77       	andi	r31, 0x7F	; 127
 c9e:	3f 2e       	mov	r3, r31
 ca0:	36 fe       	sbrs	r3, 6
 ca2:	0d c0       	rjmp	.+26     	; 0xcbe <vfprintf+0x2ca>
 ca4:	23 2d       	mov	r18, r3
 ca6:	2e 7f       	andi	r18, 0xFE	; 254
 ca8:	a2 2e       	mov	r10, r18
 caa:	89 14       	cp	r8, r9
 cac:	58 f4       	brcc	.+22     	; 0xcc4 <vfprintf+0x2d0>
 cae:	34 fe       	sbrs	r3, 4
 cb0:	0b c0       	rjmp	.+22     	; 0xcc8 <vfprintf+0x2d4>
 cb2:	32 fc       	sbrc	r3, 2
 cb4:	09 c0       	rjmp	.+18     	; 0xcc8 <vfprintf+0x2d4>
 cb6:	83 2d       	mov	r24, r3
 cb8:	8e 7e       	andi	r24, 0xEE	; 238
 cba:	a8 2e       	mov	r10, r24
 cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <vfprintf+0x2d4>
 cbe:	b8 2c       	mov	r11, r8
 cc0:	a3 2c       	mov	r10, r3
 cc2:	03 c0       	rjmp	.+6      	; 0xcca <vfprintf+0x2d6>
 cc4:	b8 2c       	mov	r11, r8
 cc6:	01 c0       	rjmp	.+2      	; 0xcca <vfprintf+0x2d6>
 cc8:	b9 2c       	mov	r11, r9
 cca:	a4 fe       	sbrs	r10, 4
 ccc:	0f c0       	rjmp	.+30     	; 0xcec <vfprintf+0x2f8>
 cce:	fe 01       	movw	r30, r28
 cd0:	e8 0d       	add	r30, r8
 cd2:	f1 1d       	adc	r31, r1
 cd4:	80 81       	ld	r24, Z
 cd6:	80 33       	cpi	r24, 0x30	; 48
 cd8:	21 f4       	brne	.+8      	; 0xce2 <vfprintf+0x2ee>
 cda:	9a 2d       	mov	r25, r10
 cdc:	99 7e       	andi	r25, 0xE9	; 233
 cde:	a9 2e       	mov	r10, r25
 ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <vfprintf+0x300>
 ce2:	a2 fe       	sbrs	r10, 2
 ce4:	06 c0       	rjmp	.+12     	; 0xcf2 <vfprintf+0x2fe>
 ce6:	b3 94       	inc	r11
 ce8:	b3 94       	inc	r11
 cea:	04 c0       	rjmp	.+8      	; 0xcf4 <vfprintf+0x300>
 cec:	8a 2d       	mov	r24, r10
 cee:	86 78       	andi	r24, 0x86	; 134
 cf0:	09 f0       	breq	.+2      	; 0xcf4 <vfprintf+0x300>
 cf2:	b3 94       	inc	r11
 cf4:	a3 fc       	sbrc	r10, 3
 cf6:	11 c0       	rjmp	.+34     	; 0xd1a <vfprintf+0x326>
 cf8:	a0 fe       	sbrs	r10, 0
 cfa:	06 c0       	rjmp	.+12     	; 0xd08 <vfprintf+0x314>
 cfc:	b2 14       	cp	r11, r2
 cfe:	88 f4       	brcc	.+34     	; 0xd22 <vfprintf+0x32e>
 d00:	28 0c       	add	r2, r8
 d02:	92 2c       	mov	r9, r2
 d04:	9b 18       	sub	r9, r11
 d06:	0e c0       	rjmp	.+28     	; 0xd24 <vfprintf+0x330>
 d08:	b2 14       	cp	r11, r2
 d0a:	60 f4       	brcc	.+24     	; 0xd24 <vfprintf+0x330>
 d0c:	b6 01       	movw	r22, r12
 d0e:	80 e2       	ldi	r24, 0x20	; 32
 d10:	90 e0       	ldi	r25, 0x00	; 0
 d12:	0e 94 f1 06 	call	0xde2	; 0xde2 <fputc>
 d16:	b3 94       	inc	r11
 d18:	f7 cf       	rjmp	.-18     	; 0xd08 <vfprintf+0x314>
 d1a:	b2 14       	cp	r11, r2
 d1c:	18 f4       	brcc	.+6      	; 0xd24 <vfprintf+0x330>
 d1e:	2b 18       	sub	r2, r11
 d20:	02 c0       	rjmp	.+4      	; 0xd26 <vfprintf+0x332>
 d22:	98 2c       	mov	r9, r8
 d24:	21 2c       	mov	r2, r1
 d26:	a4 fe       	sbrs	r10, 4
 d28:	10 c0       	rjmp	.+32     	; 0xd4a <vfprintf+0x356>
 d2a:	b6 01       	movw	r22, r12
 d2c:	80 e3       	ldi	r24, 0x30	; 48
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	0e 94 f1 06 	call	0xde2	; 0xde2 <fputc>
 d34:	a2 fe       	sbrs	r10, 2
 d36:	17 c0       	rjmp	.+46     	; 0xd66 <vfprintf+0x372>
 d38:	a1 fc       	sbrc	r10, 1
 d3a:	03 c0       	rjmp	.+6      	; 0xd42 <vfprintf+0x34e>
 d3c:	88 e7       	ldi	r24, 0x78	; 120
 d3e:	90 e0       	ldi	r25, 0x00	; 0
 d40:	02 c0       	rjmp	.+4      	; 0xd46 <vfprintf+0x352>
 d42:	88 e5       	ldi	r24, 0x58	; 88
 d44:	90 e0       	ldi	r25, 0x00	; 0
 d46:	b6 01       	movw	r22, r12
 d48:	0c c0       	rjmp	.+24     	; 0xd62 <vfprintf+0x36e>
 d4a:	8a 2d       	mov	r24, r10
 d4c:	86 78       	andi	r24, 0x86	; 134
 d4e:	59 f0       	breq	.+22     	; 0xd66 <vfprintf+0x372>
 d50:	a1 fe       	sbrs	r10, 1
 d52:	02 c0       	rjmp	.+4      	; 0xd58 <vfprintf+0x364>
 d54:	8b e2       	ldi	r24, 0x2B	; 43
 d56:	01 c0       	rjmp	.+2      	; 0xd5a <vfprintf+0x366>
 d58:	80 e2       	ldi	r24, 0x20	; 32
 d5a:	a7 fc       	sbrc	r10, 7
 d5c:	8d e2       	ldi	r24, 0x2D	; 45
 d5e:	b6 01       	movw	r22, r12
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	0e 94 f1 06 	call	0xde2	; 0xde2 <fputc>
 d66:	89 14       	cp	r8, r9
 d68:	38 f4       	brcc	.+14     	; 0xd78 <vfprintf+0x384>
 d6a:	b6 01       	movw	r22, r12
 d6c:	80 e3       	ldi	r24, 0x30	; 48
 d6e:	90 e0       	ldi	r25, 0x00	; 0
 d70:	0e 94 f1 06 	call	0xde2	; 0xde2 <fputc>
 d74:	9a 94       	dec	r9
 d76:	f7 cf       	rjmp	.-18     	; 0xd66 <vfprintf+0x372>
 d78:	8a 94       	dec	r8
 d7a:	f3 01       	movw	r30, r6
 d7c:	e8 0d       	add	r30, r8
 d7e:	f1 1d       	adc	r31, r1
 d80:	80 81       	ld	r24, Z
 d82:	b6 01       	movw	r22, r12
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	0e 94 f1 06 	call	0xde2	; 0xde2 <fputc>
 d8a:	81 10       	cpse	r8, r1
 d8c:	f5 cf       	rjmp	.-22     	; 0xd78 <vfprintf+0x384>
 d8e:	22 20       	and	r2, r2
 d90:	09 f4       	brne	.+2      	; 0xd94 <vfprintf+0x3a0>
 d92:	42 ce       	rjmp	.-892    	; 0xa18 <vfprintf+0x24>
 d94:	b6 01       	movw	r22, r12
 d96:	80 e2       	ldi	r24, 0x20	; 32
 d98:	90 e0       	ldi	r25, 0x00	; 0
 d9a:	0e 94 f1 06 	call	0xde2	; 0xde2 <fputc>
 d9e:	2a 94       	dec	r2
 da0:	f6 cf       	rjmp	.-20     	; 0xd8e <vfprintf+0x39a>
 da2:	f6 01       	movw	r30, r12
 da4:	86 81       	ldd	r24, Z+6	; 0x06
 da6:	97 81       	ldd	r25, Z+7	; 0x07
 da8:	02 c0       	rjmp	.+4      	; 0xdae <vfprintf+0x3ba>
 daa:	8f ef       	ldi	r24, 0xFF	; 255
 dac:	9f ef       	ldi	r25, 0xFF	; 255
 dae:	2b 96       	adiw	r28, 0x0b	; 11
 db0:	e2 e1       	ldi	r30, 0x12	; 18
 db2:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__epilogue_restores__>

00000db6 <strnlen_P>:
 db6:	fc 01       	movw	r30, r24
 db8:	05 90       	lpm	r0, Z+
 dba:	61 50       	subi	r22, 0x01	; 1
 dbc:	70 40       	sbci	r23, 0x00	; 0
 dbe:	01 10       	cpse	r0, r1
 dc0:	d8 f7       	brcc	.-10     	; 0xdb8 <strnlen_P+0x2>
 dc2:	80 95       	com	r24
 dc4:	90 95       	com	r25
 dc6:	8e 0f       	add	r24, r30
 dc8:	9f 1f       	adc	r25, r31
 dca:	08 95       	ret

00000dcc <strnlen>:
 dcc:	fc 01       	movw	r30, r24
 dce:	61 50       	subi	r22, 0x01	; 1
 dd0:	70 40       	sbci	r23, 0x00	; 0
 dd2:	01 90       	ld	r0, Z+
 dd4:	01 10       	cpse	r0, r1
 dd6:	d8 f7       	brcc	.-10     	; 0xdce <strnlen+0x2>
 dd8:	80 95       	com	r24
 dda:	90 95       	com	r25
 ddc:	8e 0f       	add	r24, r30
 dde:	9f 1f       	adc	r25, r31
 de0:	08 95       	ret

00000de2 <fputc>:
 de2:	0f 93       	push	r16
 de4:	1f 93       	push	r17
 de6:	cf 93       	push	r28
 de8:	df 93       	push	r29
 dea:	fb 01       	movw	r30, r22
 dec:	23 81       	ldd	r18, Z+3	; 0x03
 dee:	21 fd       	sbrc	r18, 1
 df0:	03 c0       	rjmp	.+6      	; 0xdf8 <fputc+0x16>
 df2:	8f ef       	ldi	r24, 0xFF	; 255
 df4:	9f ef       	ldi	r25, 0xFF	; 255
 df6:	2c c0       	rjmp	.+88     	; 0xe50 <fputc+0x6e>
 df8:	22 ff       	sbrs	r18, 2
 dfa:	16 c0       	rjmp	.+44     	; 0xe28 <fputc+0x46>
 dfc:	46 81       	ldd	r20, Z+6	; 0x06
 dfe:	57 81       	ldd	r21, Z+7	; 0x07
 e00:	24 81       	ldd	r18, Z+4	; 0x04
 e02:	35 81       	ldd	r19, Z+5	; 0x05
 e04:	42 17       	cp	r20, r18
 e06:	53 07       	cpc	r21, r19
 e08:	44 f4       	brge	.+16     	; 0xe1a <fputc+0x38>
 e0a:	a0 81       	ld	r26, Z
 e0c:	b1 81       	ldd	r27, Z+1	; 0x01
 e0e:	9d 01       	movw	r18, r26
 e10:	2f 5f       	subi	r18, 0xFF	; 255
 e12:	3f 4f       	sbci	r19, 0xFF	; 255
 e14:	31 83       	std	Z+1, r19	; 0x01
 e16:	20 83       	st	Z, r18
 e18:	8c 93       	st	X, r24
 e1a:	26 81       	ldd	r18, Z+6	; 0x06
 e1c:	37 81       	ldd	r19, Z+7	; 0x07
 e1e:	2f 5f       	subi	r18, 0xFF	; 255
 e20:	3f 4f       	sbci	r19, 0xFF	; 255
 e22:	37 83       	std	Z+7, r19	; 0x07
 e24:	26 83       	std	Z+6, r18	; 0x06
 e26:	14 c0       	rjmp	.+40     	; 0xe50 <fputc+0x6e>
 e28:	8b 01       	movw	r16, r22
 e2a:	ec 01       	movw	r28, r24
 e2c:	fb 01       	movw	r30, r22
 e2e:	00 84       	ldd	r0, Z+8	; 0x08
 e30:	f1 85       	ldd	r31, Z+9	; 0x09
 e32:	e0 2d       	mov	r30, r0
 e34:	09 95       	icall
 e36:	89 2b       	or	r24, r25
 e38:	e1 f6       	brne	.-72     	; 0xdf2 <fputc+0x10>
 e3a:	d8 01       	movw	r26, r16
 e3c:	16 96       	adiw	r26, 0x06	; 6
 e3e:	8d 91       	ld	r24, X+
 e40:	9c 91       	ld	r25, X
 e42:	17 97       	sbiw	r26, 0x07	; 7
 e44:	01 96       	adiw	r24, 0x01	; 1
 e46:	17 96       	adiw	r26, 0x07	; 7
 e48:	9c 93       	st	X, r25
 e4a:	8e 93       	st	-X, r24
 e4c:	16 97       	sbiw	r26, 0x06	; 6
 e4e:	ce 01       	movw	r24, r28
 e50:	df 91       	pop	r29
 e52:	cf 91       	pop	r28
 e54:	1f 91       	pop	r17
 e56:	0f 91       	pop	r16
 e58:	08 95       	ret

00000e5a <__ultoa_invert>:
 e5a:	fa 01       	movw	r30, r20
 e5c:	aa 27       	eor	r26, r26
 e5e:	28 30       	cpi	r18, 0x08	; 8
 e60:	51 f1       	breq	.+84     	; 0xeb6 <__ultoa_invert+0x5c>
 e62:	20 31       	cpi	r18, 0x10	; 16
 e64:	81 f1       	breq	.+96     	; 0xec6 <__ultoa_invert+0x6c>
 e66:	e8 94       	clt
 e68:	6f 93       	push	r22
 e6a:	6e 7f       	andi	r22, 0xFE	; 254
 e6c:	6e 5f       	subi	r22, 0xFE	; 254
 e6e:	7f 4f       	sbci	r23, 0xFF	; 255
 e70:	8f 4f       	sbci	r24, 0xFF	; 255
 e72:	9f 4f       	sbci	r25, 0xFF	; 255
 e74:	af 4f       	sbci	r26, 0xFF	; 255
 e76:	b1 e0       	ldi	r27, 0x01	; 1
 e78:	3e d0       	rcall	.+124    	; 0xef6 <__ultoa_invert+0x9c>
 e7a:	b4 e0       	ldi	r27, 0x04	; 4
 e7c:	3c d0       	rcall	.+120    	; 0xef6 <__ultoa_invert+0x9c>
 e7e:	67 0f       	add	r22, r23
 e80:	78 1f       	adc	r23, r24
 e82:	89 1f       	adc	r24, r25
 e84:	9a 1f       	adc	r25, r26
 e86:	a1 1d       	adc	r26, r1
 e88:	68 0f       	add	r22, r24
 e8a:	79 1f       	adc	r23, r25
 e8c:	8a 1f       	adc	r24, r26
 e8e:	91 1d       	adc	r25, r1
 e90:	a1 1d       	adc	r26, r1
 e92:	6a 0f       	add	r22, r26
 e94:	71 1d       	adc	r23, r1
 e96:	81 1d       	adc	r24, r1
 e98:	91 1d       	adc	r25, r1
 e9a:	a1 1d       	adc	r26, r1
 e9c:	20 d0       	rcall	.+64     	; 0xede <__ultoa_invert+0x84>
 e9e:	09 f4       	brne	.+2      	; 0xea2 <__ultoa_invert+0x48>
 ea0:	68 94       	set
 ea2:	3f 91       	pop	r19
 ea4:	2a e0       	ldi	r18, 0x0A	; 10
 ea6:	26 9f       	mul	r18, r22
 ea8:	11 24       	eor	r1, r1
 eaa:	30 19       	sub	r19, r0
 eac:	30 5d       	subi	r19, 0xD0	; 208
 eae:	31 93       	st	Z+, r19
 eb0:	de f6       	brtc	.-74     	; 0xe68 <__ultoa_invert+0xe>
 eb2:	cf 01       	movw	r24, r30
 eb4:	08 95       	ret
 eb6:	46 2f       	mov	r20, r22
 eb8:	47 70       	andi	r20, 0x07	; 7
 eba:	40 5d       	subi	r20, 0xD0	; 208
 ebc:	41 93       	st	Z+, r20
 ebe:	b3 e0       	ldi	r27, 0x03	; 3
 ec0:	0f d0       	rcall	.+30     	; 0xee0 <__ultoa_invert+0x86>
 ec2:	c9 f7       	brne	.-14     	; 0xeb6 <__ultoa_invert+0x5c>
 ec4:	f6 cf       	rjmp	.-20     	; 0xeb2 <__ultoa_invert+0x58>
 ec6:	46 2f       	mov	r20, r22
 ec8:	4f 70       	andi	r20, 0x0F	; 15
 eca:	40 5d       	subi	r20, 0xD0	; 208
 ecc:	4a 33       	cpi	r20, 0x3A	; 58
 ece:	18 f0       	brcs	.+6      	; 0xed6 <__ultoa_invert+0x7c>
 ed0:	49 5d       	subi	r20, 0xD9	; 217
 ed2:	31 fd       	sbrc	r19, 1
 ed4:	40 52       	subi	r20, 0x20	; 32
 ed6:	41 93       	st	Z+, r20
 ed8:	02 d0       	rcall	.+4      	; 0xede <__ultoa_invert+0x84>
 eda:	a9 f7       	brne	.-22     	; 0xec6 <__ultoa_invert+0x6c>
 edc:	ea cf       	rjmp	.-44     	; 0xeb2 <__ultoa_invert+0x58>
 ede:	b4 e0       	ldi	r27, 0x04	; 4
 ee0:	a6 95       	lsr	r26
 ee2:	97 95       	ror	r25
 ee4:	87 95       	ror	r24
 ee6:	77 95       	ror	r23
 ee8:	67 95       	ror	r22
 eea:	ba 95       	dec	r27
 eec:	c9 f7       	brne	.-14     	; 0xee0 <__ultoa_invert+0x86>
 eee:	00 97       	sbiw	r24, 0x00	; 0
 ef0:	61 05       	cpc	r22, r1
 ef2:	71 05       	cpc	r23, r1
 ef4:	08 95       	ret
 ef6:	9b 01       	movw	r18, r22
 ef8:	ac 01       	movw	r20, r24
 efa:	0a 2e       	mov	r0, r26
 efc:	06 94       	lsr	r0
 efe:	57 95       	ror	r21
 f00:	47 95       	ror	r20
 f02:	37 95       	ror	r19
 f04:	27 95       	ror	r18
 f06:	ba 95       	dec	r27
 f08:	c9 f7       	brne	.-14     	; 0xefc <__ultoa_invert+0xa2>
 f0a:	62 0f       	add	r22, r18
 f0c:	73 1f       	adc	r23, r19
 f0e:	84 1f       	adc	r24, r20
 f10:	95 1f       	adc	r25, r21
 f12:	a0 1d       	adc	r26, r0
 f14:	08 95       	ret

00000f16 <__prologue_saves__>:
 f16:	2f 92       	push	r2
 f18:	3f 92       	push	r3
 f1a:	4f 92       	push	r4
 f1c:	5f 92       	push	r5
 f1e:	6f 92       	push	r6
 f20:	7f 92       	push	r7
 f22:	8f 92       	push	r8
 f24:	9f 92       	push	r9
 f26:	af 92       	push	r10
 f28:	bf 92       	push	r11
 f2a:	cf 92       	push	r12
 f2c:	df 92       	push	r13
 f2e:	ef 92       	push	r14
 f30:	ff 92       	push	r15
 f32:	0f 93       	push	r16
 f34:	1f 93       	push	r17
 f36:	cf 93       	push	r28
 f38:	df 93       	push	r29
 f3a:	cd b7       	in	r28, 0x3d	; 61
 f3c:	de b7       	in	r29, 0x3e	; 62
 f3e:	ca 1b       	sub	r28, r26
 f40:	db 0b       	sbc	r29, r27
 f42:	0f b6       	in	r0, 0x3f	; 63
 f44:	f8 94       	cli
 f46:	de bf       	out	0x3e, r29	; 62
 f48:	0f be       	out	0x3f, r0	; 63
 f4a:	cd bf       	out	0x3d, r28	; 61
 f4c:	09 94       	ijmp

00000f4e <__epilogue_restores__>:
 f4e:	2a 88       	ldd	r2, Y+18	; 0x12
 f50:	39 88       	ldd	r3, Y+17	; 0x11
 f52:	48 88       	ldd	r4, Y+16	; 0x10
 f54:	5f 84       	ldd	r5, Y+15	; 0x0f
 f56:	6e 84       	ldd	r6, Y+14	; 0x0e
 f58:	7d 84       	ldd	r7, Y+13	; 0x0d
 f5a:	8c 84       	ldd	r8, Y+12	; 0x0c
 f5c:	9b 84       	ldd	r9, Y+11	; 0x0b
 f5e:	aa 84       	ldd	r10, Y+10	; 0x0a
 f60:	b9 84       	ldd	r11, Y+9	; 0x09
 f62:	c8 84       	ldd	r12, Y+8	; 0x08
 f64:	df 80       	ldd	r13, Y+7	; 0x07
 f66:	ee 80       	ldd	r14, Y+6	; 0x06
 f68:	fd 80       	ldd	r15, Y+5	; 0x05
 f6a:	0c 81       	ldd	r16, Y+4	; 0x04
 f6c:	1b 81       	ldd	r17, Y+3	; 0x03
 f6e:	aa 81       	ldd	r26, Y+2	; 0x02
 f70:	b9 81       	ldd	r27, Y+1	; 0x01
 f72:	ce 0f       	add	r28, r30
 f74:	d1 1d       	adc	r29, r1
 f76:	0f b6       	in	r0, 0x3f	; 63
 f78:	f8 94       	cli
 f7a:	de bf       	out	0x3e, r29	; 62
 f7c:	0f be       	out	0x3f, r0	; 63
 f7e:	cd bf       	out	0x3d, r28	; 61
 f80:	ed 01       	movw	r28, r26
 f82:	08 95       	ret

00000f84 <_exit>:
 f84:	f8 94       	cli

00000f86 <__stop_program>:
 f86:	ff cf       	rjmp	.-2      	; 0xf86 <__stop_program>
