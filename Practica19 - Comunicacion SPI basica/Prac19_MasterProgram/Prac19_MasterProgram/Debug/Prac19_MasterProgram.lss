
Prac19_MasterProgram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000088f  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ae  00000000  00000000  00000aff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032c  00000000  00000000  000011ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c8  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019d  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001aa5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 57 00 	call	0xae	; 0xae <main>
  74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <SPI_Mastertransmit>:
	return (*LUGAR&(1<<BIT));
}

uint8_t SPI_Mastertransmit(uint8_t cData, uint8_t Device)
{
	PORTA =~(1<<Device);
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	02 c0       	rjmp	.+4      	; 0x86 <SPI_Mastertransmit+0xa>
  82:	22 0f       	add	r18, r18
  84:	33 1f       	adc	r19, r19
  86:	6a 95       	dec	r22
  88:	e2 f7       	brpl	.-8      	; 0x82 <SPI_Mastertransmit+0x6>
  8a:	20 95       	com	r18
  8c:	2b bb       	out	0x1b, r18	; 27
	SPDR = cData;
  8e:	8f b9       	out	0x0f, r24	; 15
	while (cero_en_bit(&SPSR,SPIF)){}
  90:	77 9b       	sbis	0x0e, 7	; 14
  92:	fe cf       	rjmp	.-4      	; 0x90 <SPI_Mastertransmit+0x14>
	PORTA = 255;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8b bb       	out	0x1b, r24	; 27
	return SPDR;
  98:	8f b1       	in	r24, 0x0f	; 15
}
  9a:	08 95       	ret

0000009c <SPI_Masterinit>:

void SPI_Masterinit()
{
	DDRB |= (1<<5) | (1<<7);
  9c:	87 b3       	in	r24, 0x17	; 23
  9e:	80 6a       	ori	r24, 0xA0	; 160
  a0:	87 bb       	out	0x17, r24	; 23
	DDRA = 0b11111111;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	8a bb       	out	0x1a, r24	; 26
	PORTA = 255;
  a6:	8b bb       	out	0x1b, r24	; 27
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
  a8:	81 e5       	ldi	r24, 0x51	; 81
  aa:	8d b9       	out	0x0d, r24	; 13
  ac:	08 95       	ret

000000ae <main>:
void SPI_Masterinit();
volatile uint8_t basura=0;

int main(void)
{
	SPI_Masterinit();
  ae:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_Masterinit>
	PORTC = 255;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	85 bb       	out	0x15, r24	; 21
    while (1) 
    {
		if (cero_en_bit(&PINC,0))
  b6:	98 99       	sbic	0x13, 0	; 19
  b8:	23 c0       	rjmp	.+70     	; 0x100 <main+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	86 e7       	ldi	r24, 0x76	; 118
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x12>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x1c>
  ca:	00 00       	nop
		{
			_delay_ms(60);
			while (cero_en_bit(&PINC,0)){}
  cc:	98 9b       	sbis	0x13, 0	; 19
  ce:	fe cf       	rjmp	.-4      	; 0xcc <main+0x1e>
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	86 e7       	ldi	r24, 0x76	; 118
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x28>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x32>
  e0:	00 00       	nop
			_delay_ms(60);
			
			basura = SPI_Mastertransmit(0b11111110,0);
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	8e ef       	ldi	r24, 0xFE	; 254
  e6:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_Mastertransmit>
  ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	80 e7       	ldi	r24, 0x70	; 112
  f2:	92 e0       	ldi	r25, 0x02	; 2
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x46>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x50>
  fe:	00 00       	nop
			_delay_ms(100);
		}
		if (cero_en_bit(&PINC,1))
 100:	99 99       	sbic	0x13, 1	; 19
 102:	d9 cf       	rjmp	.-78     	; 0xb6 <main+0x8>
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	86 e7       	ldi	r24, 0x76	; 118
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x5c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x66>
 114:	00 00       	nop
		{
			_delay_ms(60);
			while (cero_en_bit(&PINC,1)){}
 116:	99 9b       	sbis	0x13, 1	; 19
 118:	fe cf       	rjmp	.-4      	; 0x116 <main+0x68>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	86 e7       	ldi	r24, 0x76	; 118
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x72>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x7c>
 12a:	00 00       	nop
			_delay_ms(60);
			
			basura = SPI_Mastertransmit(0b11110000,1);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	80 ef       	ldi	r24, 0xF0	; 240
 130:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_Mastertransmit>
 134:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	80 e7       	ldi	r24, 0x70	; 112
 13c:	92 e0       	ldi	r25, 0x02	; 2
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x90>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x9a>
 148:	00 00       	nop
 14a:	b5 cf       	rjmp	.-150    	; 0xb6 <main+0x8>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
