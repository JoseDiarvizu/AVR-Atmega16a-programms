
Prac11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000003ba  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800078  00800078  00000466  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000108c  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000977  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000766  00000000  00000000  00001fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000502  00000000  00000000  000028d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000920  00000000  00000000  00002dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000036fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a4 01 	call	0x348	; 0x348 <main>
  8a:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  92:	ae 9a       	sbi	0x15, 6	; 21
  94:	00 c0       	rjmp	.+0      	; 0x96 <toggle_e+0x4>
  96:	ae 98       	cbi	0x15, 6	; 21
  98:	08 95       	ret

0000009a <lcd_write>:
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	d8 2f       	mov	r29, r24
  a0:	66 23       	and	r22, r22
  a2:	11 f0       	breq	.+4      	; 0xa8 <lcd_write+0xe>
  a4:	ac 9a       	sbi	0x15, 4	; 21
  a6:	01 c0       	rjmp	.+2      	; 0xaa <lcd_write+0x10>
  a8:	ac 98       	cbi	0x15, 4	; 21
  aa:	ad 98       	cbi	0x15, 5	; 21
  ac:	84 b3       	in	r24, 0x14	; 20
  ae:	8f 60       	ori	r24, 0x0F	; 15
  b0:	84 bb       	out	0x14, r24	; 20
  b2:	c5 b3       	in	r28, 0x15	; 21
  b4:	c0 7f       	andi	r28, 0xF0	; 240
  b6:	8d 2f       	mov	r24, r29
  b8:	82 95       	swap	r24
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	8c 2b       	or	r24, r28
  be:	85 bb       	out	0x15, r24	; 21
  c0:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  c4:	df 70       	andi	r29, 0x0F	; 15
  c6:	dc 2b       	or	r29, r28
  c8:	d5 bb       	out	0x15, r29	; 21
  ca:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  ce:	cf 60       	ori	r28, 0x0F	; 15
  d0:	c5 bb       	out	0x15, r28	; 21
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <lcd_read>:
  d8:	88 23       	and	r24, r24
  da:	11 f0       	breq	.+4      	; 0xe0 <lcd_read+0x8>
  dc:	ac 9a       	sbi	0x15, 4	; 21
  de:	01 c0       	rjmp	.+2      	; 0xe2 <lcd_read+0xa>
  e0:	ac 98       	cbi	0x15, 4	; 21
  e2:	ad 9a       	sbi	0x15, 5	; 21
  e4:	84 b3       	in	r24, 0x14	; 20
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	84 bb       	out	0x14, r24	; 20
  ea:	ae 9a       	sbi	0x15, 6	; 21
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_read+0x16>
  ee:	93 b3       	in	r25, 0x13	; 19
  f0:	ae 98       	cbi	0x15, 6	; 21
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_read+0x1c>
  f4:	ae 9a       	sbi	0x15, 6	; 21
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_read+0x20>
  f8:	23 b3       	in	r18, 0x13	; 19
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	89 2f       	mov	r24, r25
  fe:	82 95       	swap	r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	ae 98       	cbi	0x15, 6	; 21
 104:	82 2b       	or	r24, r18
 106:	08 95       	ret

00000108 <lcd_waitbusy>:
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_read>
 10e:	88 23       	and	r24, r24
 110:	dc f3       	brlt	.-10     	; 0x108 <lcd_waitbusy>
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_waitbusy+0xc>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_read>
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
 120:	0e 94 84 00 	call	0x108	; 0x108 <lcd_waitbusy>
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	8c 2f       	mov	r24, r28
 128:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <lcd_gotoxy>:
 130:	61 11       	cpse	r22, r1
 132:	04 c0       	rjmp	.+8      	; 0x13c <lcd_gotoxy+0xc>
 134:	80 58       	subi	r24, 0x80	; 128
 136:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13a:	08 95       	ret
 13c:	80 54       	subi	r24, 0x40	; 64
 13e:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 142:	08 95       	ret

00000144 <lcd_clrscr>:
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 14a:	08 95       	ret

0000014c <lcd_putc>:
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
 150:	0e 94 84 00 	call	0x108	; 0x108 <lcd_waitbusy>
 154:	ca 30       	cpi	r28, 0x0A	; 10
 156:	49 f4       	brne	.+18     	; 0x16a <lcd_putc+0x1e>
 158:	80 34       	cpi	r24, 0x40	; 64
 15a:	10 f0       	brcs	.+4      	; 0x160 <lcd_putc+0x14>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	01 c0       	rjmp	.+2      	; 0x162 <lcd_putc+0x16>
 160:	80 e4       	ldi	r24, 0x40	; 64
 162:	80 58       	subi	r24, 0x80	; 128
 164:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 168:	04 c0       	rjmp	.+8      	; 0x172 <lcd_putc+0x26>
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	8c 2f       	mov	r24, r28
 16e:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <lcd_puts>:
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	fc 01       	movw	r30, r24
 180:	80 81       	ld	r24, Z
 182:	88 23       	and	r24, r24
 184:	29 f0       	breq	.+10     	; 0x190 <lcd_puts+0x1a>
 186:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_putc>
 18a:	89 91       	ld	r24, Y+
 18c:	81 11       	cpse	r24, r1
 18e:	fb cf       	rjmp	.-10     	; 0x186 <lcd_puts+0x10>
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 19e:	84 b3       	in	r24, 0x14	; 20
 1a0:	8f 67       	ori	r24, 0x7F	; 127
 1a2:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1a4:	80 ea       	ldi	r24, 0xA0	; 160
 1a6:	9f e0       	ldi	r25, 0x0F	; 15
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1ac:	a9 9a       	sbi	0x15, 1	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1ae:	a8 9a       	sbi	0x15, 0	; 21
    lcd_e_toggle();
 1b0:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b4:	80 ee       	ldi	r24, 0xE0	; 224
 1b6:	94 e0       	ldi	r25, 0x04	; 4
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1bc:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c0:	c0 e1       	ldi	r28, 0x10	; 16
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1d4:	a8 98       	cbi	0x15, 0	; 21
    lcd_e_toggle();
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1da:	21 97       	sbiw	r28, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1de:	88 e2       	ldi	r24, 0x28	; 40
 1e0:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1e4:	88 e0       	ldi	r24, 0x08	; 8
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1ea:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1ee:	86 e0       	ldi	r24, 0x06	; 6
 1f0:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1f4:	81 2f       	mov	r24, r17
 1f6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>

}/* lcd_init */
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	08 95       	ret

00000202 <tecladoFuncion>:
uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (*LUGAR&(1<<BIT));
}

uint8_t tecladoFuncion(volatile uint8_t *DDRT, volatile uint8_t *PORTT, volatile uint8_t *PINT) {
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	ec 01       	movw	r28, r24
 20c:	db 01       	movw	r26, r22
 20e:	fa 01       	movw	r30, r20
	
	for(uint8_t i=filas; i<=filasend;i++){
 210:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__data_end>
 214:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <filasend>
 218:	89 17       	cp	r24, r25
 21a:	88 f0       	brcs	.+34     	; 0x23e <tecladoFuncion+0x3c>
		*DDRT |= (1<<i);		// definimos puerto para teclado
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	88 81       	ld	r24, Y
 222:	9a 01       	movw	r18, r20
 224:	09 2e       	mov	r0, r25
 226:	02 c0       	rjmp	.+4      	; 0x22c <tecladoFuncion+0x2a>
 228:	22 0f       	add	r18, r18
 22a:	33 1f       	adc	r19, r19
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <tecladoFuncion+0x26>
 230:	28 2b       	or	r18, r24
 232:	28 83       	st	Y, r18
	return (*LUGAR&(1<<BIT));
}

uint8_t tecladoFuncion(volatile uint8_t *DDRT, volatile uint8_t *PORTT, volatile uint8_t *PINT) {
	
	for(uint8_t i=filas; i<=filasend;i++){
 234:	9f 5f       	subi	r25, 0xFF	; 255
 236:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <filasend>
 23a:	89 17       	cp	r24, r25
 23c:	88 f7       	brcc	.-30     	; 0x220 <tecladoFuncion+0x1e>
		*DDRT |= (1<<i);		// definimos puerto para teclado
	}
	
	while(1) {
		
		*PORTT = 0b11111111;
 23e:	0f ef       	ldi	r16, 0xFF	; 255
		
		for (uint8_t fila = filas; fila <= filasend; fila++) {
			
			*PORTT = ~(1<<fila);
 240:	c1 e0       	ldi	r28, 0x01	; 1
 242:	d0 e0       	ldi	r29, 0x00	; 0
		*DDRT |= (1<<i);		// definimos puerto para teclado
	}
	
	while(1) {
		
		*PORTT = 0b11111111;
 244:	0c 93       	st	X, r16
		
		for (uint8_t fila = filas; fila <= filasend; fila++) {
 246:	10 91 78 00 	lds	r17, 0x0078	; 0x800078 <__data_end>
 24a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <filasend>
 24e:	81 17       	cp	r24, r17
 250:	c8 f3       	brcs	.-14     	; 0x244 <tecladoFuncion+0x42>
			
			*PORTT = ~(1<<fila);
 252:	61 2f       	mov	r22, r17
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	ce 01       	movw	r24, r28
 258:	01 2e       	mov	r0, r17
 25a:	02 c0       	rjmp	.+4      	; 0x260 <tecladoFuncion+0x5e>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <tecladoFuncion+0x5a>
 264:	80 95       	com	r24
 266:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	00 c0       	rjmp	.+0      	; 0x26a <tecladoFuncion+0x68>
			_delay_us(2);
			
			for (uint8_t col = columnas; col <= columnasend; col++) {
 26a:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <columnas>
 26e:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <columnasend>
 272:	32 17       	cp	r19, r18
 274:	08 f4       	brcc	.+2      	; 0x278 <tecladoFuncion+0x76>
 276:	4b c0       	rjmp	.+150    	; 0x30e <tecladoFuncion+0x10c>



uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
 278:	80 81       	ld	r24, Z
 27a:	42 2f       	mov	r20, r18
 27c:	50 e0       	ldi	r21, 0x00	; 0
			*PORTT = ~(1<<fila);
			_delay_us(2);
			
			for (uint8_t col = columnas; col <= columnasend; col++) {
				
				if (cero_en_bit(PINT,col)) {
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 2e       	mov	r0, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <tecladoFuncion+0x86>
 284:	95 95       	asr	r25
 286:	87 95       	ror	r24
 288:	0a 94       	dec	r0
 28a:	e2 f7       	brpl	.-8      	; 0x284 <tecladoFuncion+0x82>
 28c:	80 fd       	sbrc	r24, 0
 28e:	3c c0       	rjmp	.+120    	; 0x308 <tecladoFuncion+0x106>
 290:	0c c0       	rjmp	.+24     	; 0x2aa <tecladoFuncion+0xa8>



uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
 292:	80 81       	ld	r24, Z
 294:	42 2f       	mov	r20, r18
 296:	50 e0       	ldi	r21, 0x00	; 0
			*PORTT = ~(1<<fila);
			_delay_us(2);
			
			for (uint8_t col = columnas; col <= columnasend; col++) {
				
				if (cero_en_bit(PINT,col)) {
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 2e       	mov	r0, r18
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <tecladoFuncion+0xa0>
 29e:	95 95       	asr	r25
 2a0:	87 95       	ror	r24
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <tecladoFuncion+0x9c>
 2a6:	80 fd       	sbrc	r24, 0
 2a8:	2f c0       	rjmp	.+94     	; 0x308 <tecladoFuncion+0x106>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2aa:	87 ea       	ldi	r24, 0xA7	; 167
 2ac:	91 e6       	ldi	r25, 0x61	; 97
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <tecladoFuncion+0xac>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <tecladoFuncion+0xb2>
 2b4:	00 00       	nop
 2b6:	21 e0       	ldi	r18, 0x01	; 1
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	04 2e       	mov	r0, r20
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <tecladoFuncion+0xc0>
 2be:	22 0f       	add	r18, r18
 2c0:	33 1f       	adc	r19, r19
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <tecladoFuncion+0xbc>



uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
 2c6:	80 81       	ld	r24, Z
			
			for (uint8_t col = columnas; col <= columnasend; col++) {
				
				if (cero_en_bit(PINT,col)) {
					_delay_ms(100);
					while(cero_en_bit(PINT,col)) {}
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	82 23       	and	r24, r18
 2cc:	93 23       	and	r25, r19
 2ce:	89 2b       	or	r24, r25
 2d0:	d1 f3       	breq	.-12     	; 0x2c6 <tecladoFuncion+0xc4>
 2d2:	87 ea       	ldi	r24, 0xA7	; 167
 2d4:	91 e6       	ldi	r25, 0x61	; 97
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <tecladoFuncion+0xd4>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <tecladoFuncion+0xda>
 2dc:	00 00       	nop
					_delay_ms(100);
					return teclado[filasend-fila][columnasend-col];
 2de:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <filasend>
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	86 1b       	sub	r24, r22
 2e6:	97 0b       	sbc	r25, r23
 2e8:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <columnasend>
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	24 1b       	sub	r18, r20
 2f0:	35 0b       	sbc	r19, r21
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	80 5a       	subi	r24, 0xA0	; 160
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	fc 01       	movw	r30, r24
 300:	e2 0f       	add	r30, r18
 302:	f3 1f       	adc	r31, r19
 304:	80 81       	ld	r24, Z
 306:	0a c0       	rjmp	.+20     	; 0x31c <tecladoFuncion+0x11a>
		for (uint8_t fila = filas; fila <= filasend; fila++) {
			
			*PORTT = ~(1<<fila);
			_delay_us(2);
			
			for (uint8_t col = columnas; col <= columnasend; col++) {
 308:	2f 5f       	subi	r18, 0xFF	; 255
 30a:	32 17       	cp	r19, r18
 30c:	10 f6       	brcc	.-124    	; 0x292 <tecladoFuncion+0x90>
	
	while(1) {
		
		*PORTT = 0b11111111;
		
		for (uint8_t fila = filas; fila <= filasend; fila++) {
 30e:	1f 5f       	subi	r17, 0xFF	; 255
 310:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <filasend>
 314:	81 17       	cp	r24, r17
 316:	08 f0       	brcs	.+2      	; 0x31a <tecladoFuncion+0x118>
 318:	9c cf       	rjmp	.-200    	; 0x252 <tecladoFuncion+0x50>
 31a:	94 cf       	rjmp	.-216    	; 0x244 <tecladoFuncion+0x42>
					return teclado[filasend-fila][columnasend-col];
				}
			}
		}
	}
}
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	08 95       	ret

00000326 <EEPROM_write>:

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	while (EECR & (1<<EEWE)){}
 326:	e1 99       	sbic	0x1c, 1	; 28
 328:	fe cf       	rjmp	.-4      	; 0x326 <EEPROM_write>
	EEAR = uiAddress;
 32a:	9f bb       	out	0x1f, r25	; 31
 32c:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 32e:	6d bb       	out	0x1d, r22	; 29
	cli();
 330:	f8 94       	cli
	EECR |= (1<<EEMWE);
 332:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEWE);
 334:	e1 9a       	sbi	0x1c, 1	; 28
	sei();
 336:	78 94       	sei
 338:	08 95       	ret

0000033a <EEPROM_read>:
}

uint8_t EEPROM_read(uint16_t uiAddress)
{
	while (EECR & (1<<EEWE)){}
 33a:	e1 99       	sbic	0x1c, 1	; 28
 33c:	fe cf       	rjmp	.-4      	; 0x33a <EEPROM_read>
	EEAR = uiAddress;
 33e:	9f bb       	out	0x1f, r25	; 31
 340:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);
 342:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
 344:	8d b3       	in	r24, 0x1d	; 29
 346:	08 95       	ret

00000348 <main>:

int main(void)
{
	
	
    lcd_init(LCD_DISP_ON);
 348:	8c e0       	ldi	r24, 0x0C	; 12
 34a:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_init>
	lcd_puts("0000");
 34e:	83 e7       	ldi	r24, 0x73	; 115
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
	uint8_t n1=0;
    while (1) 
    {
		uint8_t lectura = tecladoFuncion(&DDRD, &PORTD, &PIND);
 356:	40 e3       	ldi	r20, 0x30	; 48
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	62 e3       	ldi	r22, 0x32	; 50
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	81 e3       	ldi	r24, 0x31	; 49
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 01 01 	call	0x202	; 0x202 <tecladoFuncion>
 366:	c8 2f       	mov	r28, r24
		
		if (lectura <=9)
 368:	8a 30       	cpi	r24, 0x0A	; 10
 36a:	a8 f7       	brcc	.-22     	; 0x356 <main+0xe>
 36c:	03 e0       	ldi	r16, 0x03	; 3
 36e:	10 e0       	ldi	r17, 0x00	; 0
		{
			
			for (int i = maxLength-1; i>0; i--)
			{
				n1 = EEPROM_read(i-1);
 370:	01 50       	subi	r16, 0x01	; 1
 372:	11 09       	sbc	r17, r1
 374:	c8 01       	movw	r24, r16
 376:	0e 94 9d 01 	call	0x33a	; 0x33a <EEPROM_read>
				EEPROM_write(i,n1);
 37a:	68 2f       	mov	r22, r24
 37c:	c8 01       	movw	r24, r16
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	0e 94 93 01 	call	0x326	; 0x326 <EEPROM_write>
		uint8_t lectura = tecladoFuncion(&DDRD, &PORTD, &PIND);
		
		if (lectura <=9)
		{
			
			for (int i = maxLength-1; i>0; i--)
 384:	01 15       	cp	r16, r1
 386:	11 05       	cpc	r17, r1
 388:	99 f7       	brne	.-26     	; 0x370 <main+0x28>
			{
				n1 = EEPROM_read(i-1);
				EEPROM_write(i,n1);
			}
			EEPROM_write(0,lectura);
 38a:	6c 2f       	mov	r22, r28
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 93 01 	call	0x326	; 0x326 <EEPROM_write>
			lcd_gotoxy(0,0);
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 98 00 	call	0x130	; 0x130 <lcd_gotoxy>
			for (int i = 0; i<maxLength; i++)
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	d0 e0       	ldi	r29, 0x00	; 0
			{
				n1 = EEPROM_read(i);
 3a0:	ce 01       	movw	r24, r28
 3a2:	0e 94 9d 01 	call	0x33a	; 0x33a <EEPROM_read>
				lcd_putc(n1+48);
 3a6:	80 5d       	subi	r24, 0xD0	; 208
 3a8:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_putc>
				n1 = EEPROM_read(i-1);
				EEPROM_write(i,n1);
			}
			EEPROM_write(0,lectura);
			lcd_gotoxy(0,0);
			for (int i = 0; i<maxLength; i++)
 3ac:	21 96       	adiw	r28, 0x01	; 1
 3ae:	c4 30       	cpi	r28, 0x04	; 4
 3b0:	d1 05       	cpc	r29, r1
 3b2:	b1 f7       	brne	.-20     	; 0x3a0 <main+0x58>
 3b4:	d0 cf       	rjmp	.-96     	; 0x356 <main+0xe>

000003b6 <_exit>:
 3b6:	f8 94       	cli

000003b8 <__stop_program>:
 3b8:	ff cf       	rjmp	.-2      	; 0x3b8 <__stop_program>
