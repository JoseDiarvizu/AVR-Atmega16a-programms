
Practica04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000372  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800064  00800064  0000040a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000795  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bc  00000000  00000000  00000c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000316  00000000  00000000  00001301  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039f  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000161  00000000  00000000  00001a53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a4 e6       	ldi	r26, 0x64	; 100
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e2 e7       	ldi	r30, 0x72	; 114
  78:	f3 e0       	ldi	r31, 0x03	; 3
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>
  86:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  8a:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
  92:	fc 01       	movw	r30, r24
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <__system_time>
  9c:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <__system_time+0x1>
  a0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <__system_time+0x2>
  a4:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__system_time+0x3>
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	30 97       	sbiw	r30, 0x00	; 0
  ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
  ae:	60 83       	st	Z, r22
  b0:	71 83       	std	Z+1, r23	; 0x01
  b2:	82 83       	std	Z+2, r24	; 0x02
  b4:	93 83       	std	Z+3, r25	; 0x03
  b6:	08 95       	ret

000000b8 <main>:
volatile uint8_t randomNumber = 0;

 
int main(void)
{
    sei();
  b8:	78 94       	sei
	MCUCR = 0B00000011;
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	85 bf       	out	0x35, r24	; 53
	GIFR = 0B11100000;
  be:	80 ee       	ldi	r24, 0xE0	; 224
  c0:	8a bf       	out	0x3a, r24	; 58
	GICR = 0B01000000;
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	8b bf       	out	0x3b, r24	; 59
	DDRA = 0B11111111;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0B00000000;
  ca:	11 ba       	out	0x11, r1	; 17
	srand (time(NULL));
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 49 00 	call	0x92	; 0x92 <time>
  d4:	cb 01       	movw	r24, r22
  d6:	0e 94 49 01 	call	0x292	; 0x292 <srand>
  da:	ff cf       	rjmp	.-2      	; 0xda <main+0x22>

000000dc <__vector_1>:
    }
}


ISR(INT0_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	87 e9       	ldi	r24, 0x97	; 151
 100:	9a e3       	ldi	r25, 0x3A	; 58
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <__vector_1+0x26>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__vector_1+0x2c>
 108:	00 00       	nop
	_delay_ms(60);
	while (cero_en_bit(&PIND,2)){}
 10a:	82 9b       	sbis	0x10, 2	; 16
 10c:	fe cf       	rjmp	.-4      	; 0x10a <__vector_1+0x2e>
 10e:	87 e9       	ldi	r24, 0x97	; 151
 110:	9a e3       	ldi	r25, 0x3A	; 58
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <__vector_1+0x36>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__vector_1+0x3c>
 118:	00 00       	nop
	_delay_ms(60);	
	
	randomNumber = rand()%6 + 1;
 11a:	0e 94 44 01 	call	0x288	; 0x288 <rand>
 11e:	66 e0       	ldi	r22, 0x06	; 6
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__divmodhi4>
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
	
	if (randomNumber == 1)
 12c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	19 f4       	brne	.+6      	; 0x13a <__vector_1+0x5e>
	{
		PORTA = 0B00001000;
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	8b bb       	out	0x1b, r24	; 27
 138:	22 c0       	rjmp	.+68     	; 0x17e <__vector_1+0xa2>
	}
	else if (randomNumber ==2)
 13a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	19 f4       	brne	.+6      	; 0x148 <__vector_1+0x6c>
	{
		PORTA = 0B01000001;
 142:	81 e4       	ldi	r24, 0x41	; 65
 144:	8b bb       	out	0x1b, r24	; 27
 146:	1b c0       	rjmp	.+54     	; 0x17e <__vector_1+0xa2>
	}
	else if (randomNumber ==3)
 148:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	19 f4       	brne	.+6      	; 0x156 <__vector_1+0x7a>
	{
		PORTA = 0B01001001;
 150:	89 e4       	ldi	r24, 0x49	; 73
 152:	8b bb       	out	0x1b, r24	; 27
 154:	14 c0       	rjmp	.+40     	; 0x17e <__vector_1+0xa2>
	}
	else if (randomNumber ==4)
 156:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	19 f4       	brne	.+6      	; 0x164 <__vector_1+0x88>
	{
		PORTA =0B01010101;
 15e:	85 e5       	ldi	r24, 0x55	; 85
 160:	8b bb       	out	0x1b, r24	; 27
 162:	0d c0       	rjmp	.+26     	; 0x17e <__vector_1+0xa2>
	}
	else if (randomNumber ==5)
 164:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 168:	85 30       	cpi	r24, 0x05	; 5
 16a:	19 f4       	brne	.+6      	; 0x172 <__vector_1+0x96>
	{
		PORTA = 0B01011101;
 16c:	8d e5       	ldi	r24, 0x5D	; 93
 16e:	8b bb       	out	0x1b, r24	; 27
 170:	06 c0       	rjmp	.+12     	; 0x17e <__vector_1+0xa2>
	}
	else if (randomNumber ==6)
 172:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 176:	86 30       	cpi	r24, 0x06	; 6
 178:	11 f4       	brne	.+4      	; 0x17e <__vector_1+0xa2>
	{
		PORTA = 0B01110111;
 17a:	87 e7       	ldi	r24, 0x77	; 119
 17c:	8b bb       	out	0x1b, r24	; 27
	}
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__divmodhi4>:
 1a0:	97 fb       	bst	r25, 7
 1a2:	07 2e       	mov	r0, r23
 1a4:	16 f4       	brtc	.+4      	; 0x1aa <__divmodhi4+0xa>
 1a6:	00 94       	com	r0
 1a8:	07 d0       	rcall	.+14     	; 0x1b8 <__divmodhi4_neg1>
 1aa:	77 fd       	sbrc	r23, 7
 1ac:	09 d0       	rcall	.+18     	; 0x1c0 <__divmodhi4_neg2>
 1ae:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__udivmodhi4>
 1b2:	07 fc       	sbrc	r0, 7
 1b4:	05 d0       	rcall	.+10     	; 0x1c0 <__divmodhi4_neg2>
 1b6:	3e f4       	brtc	.+14     	; 0x1c6 <__divmodhi4_exit>

000001b8 <__divmodhi4_neg1>:
 1b8:	90 95       	com	r25
 1ba:	81 95       	neg	r24
 1bc:	9f 4f       	sbci	r25, 0xFF	; 255
 1be:	08 95       	ret

000001c0 <__divmodhi4_neg2>:
 1c0:	70 95       	com	r23
 1c2:	61 95       	neg	r22
 1c4:	7f 4f       	sbci	r23, 0xFF	; 255

000001c6 <__divmodhi4_exit>:
 1c6:	08 95       	ret

000001c8 <__udivmodhi4>:
 1c8:	aa 1b       	sub	r26, r26
 1ca:	bb 1b       	sub	r27, r27
 1cc:	51 e1       	ldi	r21, 0x11	; 17
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <__udivmodhi4_ep>

000001d0 <__udivmodhi4_loop>:
 1d0:	aa 1f       	adc	r26, r26
 1d2:	bb 1f       	adc	r27, r27
 1d4:	a6 17       	cp	r26, r22
 1d6:	b7 07       	cpc	r27, r23
 1d8:	10 f0       	brcs	.+4      	; 0x1de <__udivmodhi4_ep>
 1da:	a6 1b       	sub	r26, r22
 1dc:	b7 0b       	sbc	r27, r23

000001de <__udivmodhi4_ep>:
 1de:	88 1f       	adc	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	5a 95       	dec	r21
 1e4:	a9 f7       	brne	.-22     	; 0x1d0 <__udivmodhi4_loop>
 1e6:	80 95       	com	r24
 1e8:	90 95       	com	r25
 1ea:	bc 01       	movw	r22, r24
 1ec:	cd 01       	movw	r24, r26
 1ee:	08 95       	ret

000001f0 <do_rand>:
 1f0:	8f 92       	push	r8
 1f2:	9f 92       	push	r9
 1f4:	af 92       	push	r10
 1f6:	bf 92       	push	r11
 1f8:	cf 92       	push	r12
 1fa:	df 92       	push	r13
 1fc:	ef 92       	push	r14
 1fe:	ff 92       	push	r15
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ec 01       	movw	r28, r24
 206:	68 81       	ld	r22, Y
 208:	79 81       	ldd	r23, Y+1	; 0x01
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	9b 81       	ldd	r25, Y+3	; 0x03
 20e:	61 15       	cp	r22, r1
 210:	71 05       	cpc	r23, r1
 212:	81 05       	cpc	r24, r1
 214:	91 05       	cpc	r25, r1
 216:	21 f4       	brne	.+8      	; 0x220 <do_rand+0x30>
 218:	64 e2       	ldi	r22, 0x24	; 36
 21a:	79 ed       	ldi	r23, 0xD9	; 217
 21c:	8b e5       	ldi	r24, 0x5B	; 91
 21e:	97 e0       	ldi	r25, 0x07	; 7
 220:	2d e1       	ldi	r18, 0x1D	; 29
 222:	33 ef       	ldi	r19, 0xF3	; 243
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__divmodsi4>
 22c:	49 01       	movw	r8, r18
 22e:	5a 01       	movw	r10, r20
 230:	9b 01       	movw	r18, r22
 232:	ac 01       	movw	r20, r24
 234:	a7 ea       	ldi	r26, 0xA7	; 167
 236:	b1 e4       	ldi	r27, 0x41	; 65
 238:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__muluhisi3>
 23c:	6b 01       	movw	r12, r22
 23e:	7c 01       	movw	r14, r24
 240:	ac ee       	ldi	r26, 0xEC	; 236
 242:	b4 ef       	ldi	r27, 0xF4	; 244
 244:	a5 01       	movw	r20, r10
 246:	94 01       	movw	r18, r8
 248:	0e 94 81 01 	call	0x302	; 0x302 <__mulohisi3>
 24c:	dc 01       	movw	r26, r24
 24e:	cb 01       	movw	r24, r22
 250:	8c 0d       	add	r24, r12
 252:	9d 1d       	adc	r25, r13
 254:	ae 1d       	adc	r26, r14
 256:	bf 1d       	adc	r27, r15
 258:	b7 ff       	sbrs	r27, 7
 25a:	03 c0       	rjmp	.+6      	; 0x262 <do_rand+0x72>
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	a1 09       	sbc	r26, r1
 260:	b0 48       	sbci	r27, 0x80	; 128
 262:	88 83       	st	Y, r24
 264:	99 83       	std	Y+1, r25	; 0x01
 266:	aa 83       	std	Y+2, r26	; 0x02
 268:	bb 83       	std	Y+3, r27	; 0x03
 26a:	9f 77       	andi	r25, 0x7F	; 127
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	df 90       	pop	r13
 276:	cf 90       	pop	r12
 278:	bf 90       	pop	r11
 27a:	af 90       	pop	r10
 27c:	9f 90       	pop	r9
 27e:	8f 90       	pop	r8
 280:	08 95       	ret

00000282 <rand_r>:
 282:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <do_rand>
 286:	08 95       	ret

00000288 <rand>:
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <do_rand>
 290:	08 95       	ret

00000292 <srand>:
 292:	a0 e0       	ldi	r26, 0x00	; 0
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 29a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 29e:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 2a2:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 2a6:	08 95       	ret

000002a8 <__divmodsi4>:
 2a8:	05 2e       	mov	r0, r21
 2aa:	97 fb       	bst	r25, 7
 2ac:	1e f4       	brtc	.+6      	; 0x2b4 <__divmodsi4+0xc>
 2ae:	00 94       	com	r0
 2b0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__negsi2>
 2b4:	57 fd       	sbrc	r21, 7
 2b6:	07 d0       	rcall	.+14     	; 0x2c6 <__divmodsi4_neg2>
 2b8:	0e 94 86 01 	call	0x30c	; 0x30c <__udivmodsi4>
 2bc:	07 fc       	sbrc	r0, 7
 2be:	03 d0       	rcall	.+6      	; 0x2c6 <__divmodsi4_neg2>
 2c0:	4e f4       	brtc	.+18     	; 0x2d4 <__divmodsi4_exit>
 2c2:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__negsi2>

000002c6 <__divmodsi4_neg2>:
 2c6:	50 95       	com	r21
 2c8:	40 95       	com	r20
 2ca:	30 95       	com	r19
 2cc:	21 95       	neg	r18
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255
 2d0:	4f 4f       	sbci	r20, 0xFF	; 255
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255

000002d4 <__divmodsi4_exit>:
 2d4:	08 95       	ret

000002d6 <__negsi2>:
 2d6:	90 95       	com	r25
 2d8:	80 95       	com	r24
 2da:	70 95       	com	r23
 2dc:	61 95       	neg	r22
 2de:	7f 4f       	sbci	r23, 0xFF	; 255
 2e0:	8f 4f       	sbci	r24, 0xFF	; 255
 2e2:	9f 4f       	sbci	r25, 0xFF	; 255
 2e4:	08 95       	ret

000002e6 <__muluhisi3>:
 2e6:	0e 94 a8 01 	call	0x350	; 0x350 <__umulhisi3>
 2ea:	a5 9f       	mul	r26, r21
 2ec:	90 0d       	add	r25, r0
 2ee:	b4 9f       	mul	r27, r20
 2f0:	90 0d       	add	r25, r0
 2f2:	a4 9f       	mul	r26, r20
 2f4:	80 0d       	add	r24, r0
 2f6:	91 1d       	adc	r25, r1
 2f8:	11 24       	eor	r1, r1
 2fa:	08 95       	ret

000002fc <__mulshisi3>:
 2fc:	b7 ff       	sbrs	r27, 7
 2fe:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__muluhisi3>

00000302 <__mulohisi3>:
 302:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__muluhisi3>
 306:	82 1b       	sub	r24, r18
 308:	93 0b       	sbc	r25, r19
 30a:	08 95       	ret

0000030c <__udivmodsi4>:
 30c:	a1 e2       	ldi	r26, 0x21	; 33
 30e:	1a 2e       	mov	r1, r26
 310:	aa 1b       	sub	r26, r26
 312:	bb 1b       	sub	r27, r27
 314:	fd 01       	movw	r30, r26
 316:	0d c0       	rjmp	.+26     	; 0x332 <__udivmodsi4_ep>

00000318 <__udivmodsi4_loop>:
 318:	aa 1f       	adc	r26, r26
 31a:	bb 1f       	adc	r27, r27
 31c:	ee 1f       	adc	r30, r30
 31e:	ff 1f       	adc	r31, r31
 320:	a2 17       	cp	r26, r18
 322:	b3 07       	cpc	r27, r19
 324:	e4 07       	cpc	r30, r20
 326:	f5 07       	cpc	r31, r21
 328:	20 f0       	brcs	.+8      	; 0x332 <__udivmodsi4_ep>
 32a:	a2 1b       	sub	r26, r18
 32c:	b3 0b       	sbc	r27, r19
 32e:	e4 0b       	sbc	r30, r20
 330:	f5 0b       	sbc	r31, r21

00000332 <__udivmodsi4_ep>:
 332:	66 1f       	adc	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	88 1f       	adc	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	1a 94       	dec	r1
 33c:	69 f7       	brne	.-38     	; 0x318 <__udivmodsi4_loop>
 33e:	60 95       	com	r22
 340:	70 95       	com	r23
 342:	80 95       	com	r24
 344:	90 95       	com	r25
 346:	9b 01       	movw	r18, r22
 348:	ac 01       	movw	r20, r24
 34a:	bd 01       	movw	r22, r26
 34c:	cf 01       	movw	r24, r30
 34e:	08 95       	ret

00000350 <__umulhisi3>:
 350:	a2 9f       	mul	r26, r18
 352:	b0 01       	movw	r22, r0
 354:	b3 9f       	mul	r27, r19
 356:	c0 01       	movw	r24, r0
 358:	a3 9f       	mul	r26, r19
 35a:	70 0d       	add	r23, r0
 35c:	81 1d       	adc	r24, r1
 35e:	11 24       	eor	r1, r1
 360:	91 1d       	adc	r25, r1
 362:	b2 9f       	mul	r27, r18
 364:	70 0d       	add	r23, r0
 366:	81 1d       	adc	r24, r1
 368:	11 24       	eor	r1, r1
 36a:	91 1d       	adc	r25, r1
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
