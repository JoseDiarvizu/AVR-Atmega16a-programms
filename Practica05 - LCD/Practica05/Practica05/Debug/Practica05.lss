
Practica05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000023e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cd5  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000806  00000000  00000000  000010ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005cb  00000000  00000000  000018b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00001e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c5  00000000  00000000  00002434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000029f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  7a:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  82:	ae 9a       	sbi	0x15, 6	; 21
  84:	00 c0       	rjmp	.+0      	; 0x86 <toggle_e+0x4>
  86:	ae 98       	cbi	0x15, 6	; 21
  88:	08 95       	ret

0000008a <lcd_write>:
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	d8 2f       	mov	r29, r24
  90:	66 23       	and	r22, r22
  92:	11 f0       	breq	.+4      	; 0x98 <lcd_write+0xe>
  94:	ac 9a       	sbi	0x15, 4	; 21
  96:	01 c0       	rjmp	.+2      	; 0x9a <lcd_write+0x10>
  98:	ac 98       	cbi	0x15, 4	; 21
  9a:	ad 98       	cbi	0x15, 5	; 21
  9c:	84 b3       	in	r24, 0x14	; 20
  9e:	8f 60       	ori	r24, 0x0F	; 15
  a0:	84 bb       	out	0x14, r24	; 20
  a2:	c5 b3       	in	r28, 0x15	; 21
  a4:	c0 7f       	andi	r28, 0xF0	; 240
  a6:	8d 2f       	mov	r24, r29
  a8:	82 95       	swap	r24
  aa:	8f 70       	andi	r24, 0x0F	; 15
  ac:	8c 2b       	or	r24, r28
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  b4:	df 70       	andi	r29, 0x0F	; 15
  b6:	dc 2b       	or	r29, r28
  b8:	d5 bb       	out	0x15, r29	; 21
  ba:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  be:	cf 60       	ori	r28, 0x0F	; 15
  c0:	c5 bb       	out	0x15, r28	; 21
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <lcd_read>:
  c8:	88 23       	and	r24, r24
  ca:	11 f0       	breq	.+4      	; 0xd0 <lcd_read+0x8>
  cc:	ac 9a       	sbi	0x15, 4	; 21
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <lcd_read+0xa>
  d0:	ac 98       	cbi	0x15, 4	; 21
  d2:	ad 9a       	sbi	0x15, 5	; 21
  d4:	84 b3       	in	r24, 0x14	; 20
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	84 bb       	out	0x14, r24	; 20
  da:	ae 9a       	sbi	0x15, 6	; 21
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_read+0x16>
  de:	93 b3       	in	r25, 0x13	; 19
  e0:	ae 98       	cbi	0x15, 6	; 21
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_read+0x1c>
  e4:	ae 9a       	sbi	0x15, 6	; 21
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_read+0x20>
  e8:	23 b3       	in	r18, 0x13	; 19
  ea:	2f 70       	andi	r18, 0x0F	; 15
  ec:	89 2f       	mov	r24, r25
  ee:	82 95       	swap	r24
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	ae 98       	cbi	0x15, 6	; 21
  f4:	82 2b       	or	r24, r18
  f6:	08 95       	ret

000000f8 <lcd_waitbusy>:
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_read>
  fe:	88 23       	and	r24, r24
 100:	dc f3       	brlt	.-10     	; 0xf8 <lcd_waitbusy>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_waitbusy+0xc>
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_read>
 10a:	08 95       	ret

0000010c <lcd_command>:
 10c:	cf 93       	push	r28
 10e:	c8 2f       	mov	r28, r24
 110:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_waitbusy>
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	8c 2f       	mov	r24, r28
 118:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <lcd_gotoxy>:
 120:	61 11       	cpse	r22, r1
 122:	04 c0       	rjmp	.+8      	; 0x12c <lcd_gotoxy+0xc>
 124:	80 58       	subi	r24, 0x80	; 128
 126:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
 12a:	08 95       	ret
 12c:	80 54       	subi	r24, 0x40	; 64
 12e:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
 132:	08 95       	ret

00000134 <lcd_clrscr>:
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
 13a:	08 95       	ret

0000013c <lcd_putc>:
 13c:	cf 93       	push	r28
 13e:	c8 2f       	mov	r28, r24
 140:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_waitbusy>
 144:	ca 30       	cpi	r28, 0x0A	; 10
 146:	49 f4       	brne	.+18     	; 0x15a <lcd_putc+0x1e>
 148:	80 34       	cpi	r24, 0x40	; 64
 14a:	10 f0       	brcs	.+4      	; 0x150 <lcd_putc+0x14>
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	01 c0       	rjmp	.+2      	; 0x152 <lcd_putc+0x16>
 150:	80 e4       	ldi	r24, 0x40	; 64
 152:	80 58       	subi	r24, 0x80	; 128
 154:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
 158:	04 c0       	rjmp	.+8      	; 0x162 <lcd_putc+0x26>
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	8c 2f       	mov	r24, r28
 15e:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <lcd_puts>:
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ec 01       	movw	r28, r24
 16c:	21 96       	adiw	r28, 0x01	; 1
 16e:	fc 01       	movw	r30, r24
 170:	80 81       	ld	r24, Z
 172:	88 23       	and	r24, r24
 174:	29 f0       	breq	.+10     	; 0x180 <lcd_puts+0x1a>
 176:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
 17a:	89 91       	ld	r24, Y+
 17c:	81 11       	cpse	r24, r1
 17e:	fb cf       	rjmp	.-10     	; 0x176 <lcd_puts+0x10>
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 18e:	84 b3       	in	r24, 0x14	; 20
 190:	8f 67       	ori	r24, 0x7F	; 127
 192:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 194:	80 ea       	ldi	r24, 0xA0	; 160
 196:	9f e0       	ldi	r25, 0x0F	; 15
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 19c:	a9 9a       	sbi	0x15, 1	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 19e:	a8 9a       	sbi	0x15, 0	; 21
    lcd_e_toggle();
 1a0:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1a4:	80 ee       	ldi	r24, 0xE0	; 224
 1a6:	94 e0       	ldi	r25, 0x04	; 4
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1ac:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b0:	c0 e1       	ldi	r28, 0x10	; 16
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	ce 01       	movw	r24, r28
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1ba:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1be:	ce 01       	movw	r24, r28
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1c4:	a8 98       	cbi	0x15, 0	; 21
    lcd_e_toggle();
 1c6:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ca:	21 97       	sbiw	r28, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1ce:	88 e2       	ldi	r24, 0x28	; 40
 1d0:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1d4:	88 e0       	ldi	r24, 0x08	; 8
 1d6:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1da:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1e4:	81 2f       	mov	r24, r17
 1e6:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>

}/* lcd_init */
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	08 95       	ret

000001f2 <main>:
//*************************************************************************


int main(void)
{
	lcd_init(LCD_DISP_ON);
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
 1f4:	0e 94 c3 00 	call	0x186	; 0x186 <lcd_init>
	lcd_gotoxy(7,0);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	87 e0       	ldi	r24, 0x07	; 7
 1fc:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
	
	
	lcd_puts("QWERQWERQWERQWE");
 200:	80 e6       	ldi	r24, 0x60	; 96
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	2f e7       	ldi	r18, 0x7F	; 127
 20a:	8a e1       	ldi	r24, 0x1A	; 26
 20c:	96 e0       	ldi	r25, 0x06	; 6
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x1c>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x26>
 218:	00 00       	nop
	_delay_ms(2000);
	

	
	lcd_command(LCD_MOVE_DISP_RIGHT);
 21a:	8c e1       	ldi	r24, 0x1C	; 28
 21c:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
 220:	2f e7       	ldi	r18, 0x7F	; 127
 222:	8a e1       	ldi	r24, 0x1A	; 26
 224:	96 e0       	ldi	r25, 0x06	; 6
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x34>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x3e>
 230:	00 00       	nop
	_delay_ms(2000);
	lcd_command(LCD_MOVE_DISP_LEFT);
 232:	88 e1       	ldi	r24, 0x18	; 24
 234:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
 238:	ff cf       	rjmp	.-2      	; 0x238 <main+0x46>

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
