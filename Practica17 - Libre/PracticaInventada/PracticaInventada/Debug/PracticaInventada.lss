
PracticaInventada.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000456  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00000456  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000c0  008000c0  0000054a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001217  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000991  00000000  00000000  000018a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ce  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fd  00000000  00000000  00002c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1c  00000000  00000000  0000312d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003b49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3c       	cpi	r26, 0xC0	; 192
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ec       	ldi	r26, 0xC0	; 192
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3c       	cpi	r26, 0xC1	; 193
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  8a:	0c 94 29 02 	jmp	0x452	; 0x452 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  92:	ae 9a       	sbi	0x15, 6	; 21
  94:	00 c0       	rjmp	.+0      	; 0x96 <toggle_e+0x4>
  96:	ae 98       	cbi	0x15, 6	; 21
  98:	08 95       	ret

0000009a <lcd_write>:
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	d8 2f       	mov	r29, r24
  a0:	66 23       	and	r22, r22
  a2:	11 f0       	breq	.+4      	; 0xa8 <lcd_write+0xe>
  a4:	ac 9a       	sbi	0x15, 4	; 21
  a6:	01 c0       	rjmp	.+2      	; 0xaa <lcd_write+0x10>
  a8:	ac 98       	cbi	0x15, 4	; 21
  aa:	ad 98       	cbi	0x15, 5	; 21
  ac:	84 b3       	in	r24, 0x14	; 20
  ae:	8f 60       	ori	r24, 0x0F	; 15
  b0:	84 bb       	out	0x14, r24	; 20
  b2:	c5 b3       	in	r28, 0x15	; 21
  b4:	c0 7f       	andi	r28, 0xF0	; 240
  b6:	8d 2f       	mov	r24, r29
  b8:	82 95       	swap	r24
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	8c 2b       	or	r24, r28
  be:	85 bb       	out	0x15, r24	; 21
  c0:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  c4:	df 70       	andi	r29, 0x0F	; 15
  c6:	dc 2b       	or	r29, r28
  c8:	d5 bb       	out	0x15, r29	; 21
  ca:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  ce:	cf 60       	ori	r28, 0x0F	; 15
  d0:	c5 bb       	out	0x15, r28	; 21
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <lcd_read>:
  d8:	88 23       	and	r24, r24
  da:	11 f0       	breq	.+4      	; 0xe0 <lcd_read+0x8>
  dc:	ac 9a       	sbi	0x15, 4	; 21
  de:	01 c0       	rjmp	.+2      	; 0xe2 <lcd_read+0xa>
  e0:	ac 98       	cbi	0x15, 4	; 21
  e2:	ad 9a       	sbi	0x15, 5	; 21
  e4:	84 b3       	in	r24, 0x14	; 20
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	84 bb       	out	0x14, r24	; 20
  ea:	ae 9a       	sbi	0x15, 6	; 21
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_read+0x16>
  ee:	93 b3       	in	r25, 0x13	; 19
  f0:	ae 98       	cbi	0x15, 6	; 21
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_read+0x1c>
  f4:	ae 9a       	sbi	0x15, 6	; 21
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_read+0x20>
  f8:	23 b3       	in	r18, 0x13	; 19
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	89 2f       	mov	r24, r25
  fe:	82 95       	swap	r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	ae 98       	cbi	0x15, 6	; 21
 104:	82 2b       	or	r24, r18
 106:	08 95       	ret

00000108 <lcd_waitbusy>:
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_read>
 10e:	88 23       	and	r24, r24
 110:	dc f3       	brlt	.-10     	; 0x108 <lcd_waitbusy>
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_waitbusy+0xc>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_read>
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	cf 93       	push	r28
 11e:	c8 2f       	mov	r28, r24
 120:	0e 94 84 00 	call	0x108	; 0x108 <lcd_waitbusy>
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	8c 2f       	mov	r24, r28
 128:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <lcd_gotoxy>:
 130:	61 11       	cpse	r22, r1
 132:	04 c0       	rjmp	.+8      	; 0x13c <lcd_gotoxy+0xc>
 134:	80 58       	subi	r24, 0x80	; 128
 136:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13a:	08 95       	ret
 13c:	80 54       	subi	r24, 0x40	; 64
 13e:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 142:	08 95       	ret

00000144 <lcd_clrscr>:
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 14a:	08 95       	ret

0000014c <lcd_putc>:
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
 150:	0e 94 84 00 	call	0x108	; 0x108 <lcd_waitbusy>
 154:	ca 30       	cpi	r28, 0x0A	; 10
 156:	49 f4       	brne	.+18     	; 0x16a <lcd_putc+0x1e>
 158:	80 34       	cpi	r24, 0x40	; 64
 15a:	10 f0       	brcs	.+4      	; 0x160 <lcd_putc+0x14>
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	01 c0       	rjmp	.+2      	; 0x162 <lcd_putc+0x16>
 160:	80 e4       	ldi	r24, 0x40	; 64
 162:	80 58       	subi	r24, 0x80	; 128
 164:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 168:	04 c0       	rjmp	.+8      	; 0x172 <lcd_putc+0x26>
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	8c 2f       	mov	r24, r28
 16e:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <lcd_puts>:
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	ec 01       	movw	r28, r24
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	fc 01       	movw	r30, r24
 180:	80 81       	ld	r24, Z
 182:	88 23       	and	r24, r24
 184:	29 f0       	breq	.+10     	; 0x190 <lcd_puts+0x1a>
 186:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_putc>
 18a:	89 91       	ld	r24, Y+
 18c:	81 11       	cpse	r24, r1
 18e:	fb cf       	rjmp	.-10     	; 0x186 <lcd_puts+0x10>
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 19e:	84 b3       	in	r24, 0x14	; 20
 1a0:	8f 67       	ori	r24, 0x7F	; 127
 1a2:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1a4:	80 ea       	ldi	r24, 0xA0	; 160
 1a6:	9f e0       	ldi	r25, 0x0F	; 15
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1ac:	a9 9a       	sbi	0x15, 1	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1ae:	a8 9a       	sbi	0x15, 0	; 21
    lcd_e_toggle();
 1b0:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b4:	80 ee       	ldi	r24, 0xE0	; 224
 1b6:	94 e0       	ldi	r25, 0x04	; 4
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1bc:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c0:	c0 e1       	ldi	r28, 0x10	; 16
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1d4:	a8 98       	cbi	0x15, 0	; 21
    lcd_e_toggle();
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1da:	21 97       	sbiw	r28, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1de:	88 e2       	ldi	r24, 0x28	; 40
 1e0:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1e4:	88 e0       	ldi	r24, 0x08	; 8
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1ea:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1ee:	86 e0       	ldi	r24, 0x06	; 6
 1f0:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1f4:	81 2f       	mov	r24, r17
 1f6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>

}/* lcd_init */
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	08 95       	ret

00000202 <USART_init>:
	return (*LUGAR&(1<<BIT));
}


void USART_init(uint16_t ubrr){
	UBRRH = (ubrr>>8);
 202:	90 bd       	out	0x20, r25	; 32
	UBRRL = ubrr;
 204:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<TXEN) | (1<<RXEN) | (1<<RXCIE);
 206:	88 e9       	ldi	r24, 0x98	; 152
 208:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL) | (3<<UCSZ0);
 20a:	86 e8       	ldi	r24, 0x86	; 134
 20c:	80 bd       	out	0x20, r24	; 32
 20e:	08 95       	ret

00000210 <__vector_11>:
}

ISR (USART_RXC_vect)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	uint8_t dato = UDR;
 232:	8c b1       	in	r24, 0x0c	; 12
	dato = dato - 48;
	if (dato == instruccion)
 234:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__data_end>
 238:	80 53       	subi	r24, 0x30	; 48
 23a:	89 13       	cpse	r24, r25
 23c:	16 c0       	rjmp	.+44     	; 0x26a <__vector_11+0x5a>
	{
		lcd_clrscr();
 23e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clrscr>
		lcd_puts("CORRECTO!");
 242:	80 e7       	ldi	r24, 0x70	; 112
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	2f e1       	ldi	r18, 0x1F	; 31
 24c:	81 ea       	ldi	r24, 0xA1	; 161
 24e:	97 e0       	ldi	r25, 0x07	; 7
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <__vector_11+0x40>
 258:	00 c0       	rjmp	.+0      	; 0x25a <__vector_11+0x4a>
 25a:	00 00       	nop
		
		_delay_ms(2500);
		lcd_clrscr();
 25c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clrscr>
		lcd_puts("Simon dice...");
 260:	8a e7       	ldi	r24, 0x7A	; 122
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
 268:	15 c0       	rjmp	.+42     	; 0x294 <__vector_11+0x84>
	}
	else{
		lcd_clrscr();
 26a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clrscr>
		lcd_puts("INCORRECTO!  ");
 26e:	88 e8       	ldi	r24, 0x88	; 136
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
 276:	2f e1       	ldi	r18, 0x1F	; 31
 278:	81 ea       	ldi	r24, 0xA1	; 161
 27a:	97 e0       	ldi	r25, 0x07	; 7
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <__vector_11+0x6c>
 284:	00 c0       	rjmp	.+0      	; 0x286 <__vector_11+0x76>
 286:	00 00       	nop
		
		_delay_ms(2500);
		lcd_clrscr();
 288:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_clrscr>
		lcd_puts("Simon dice...");
 28c:	8a e7       	ldi	r24, 0x7A	; 122
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
	}
	
}
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <USART_Transmit>:

void USART_Transmit(uint8_t dato){
	while (!(UCSRA & (1<<UDRE))){}
 2b6:	5d 9b       	sbis	0x0b, 5	; 11
 2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <USART_Transmit>
	UDR = dato;
 2ba:	8c b9       	out	0x0c, r24	; 12
 2bc:	08 95       	ret

000002be <tecladoFuncion>:
	
}

uint8_t tecladoFuncion(volatile uint8_t *DDRT, volatile uint8_t *PORTT, volatile uint8_t *PINT) {
 2be:	ff 92       	push	r15
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	eb 01       	movw	r28, r22
 2ca:	fa 01       	movw	r30, r20
	//Ejemplo:

	//uint8_t tecla;
	//tecla = tecladoFuncion(&DDRA,&PORTA,&PINA);

	*DDRT = (1<<7)|(1<<6)|(1<<5)|(1<<4);		// definimos puerto para teclado
 2cc:	20 ef       	ldi	r18, 0xF0	; 240
 2ce:	dc 01       	movw	r26, r24
 2d0:	2c 93       	st	X, r18
	
	while(1) {
		
		*PORTT = 0b11111111;
 2d2:	ff 24       	eor	r15, r15
 2d4:	fa 94       	dec	r15
		
		for (uint8_t fila = 7; fila > 3; fila--) {
			
			*PORTT = ~(1<<fila);
 2d6:	01 e0       	ldi	r16, 0x01	; 1
 2d8:	10 e0       	ldi	r17, 0x00	; 0

	*DDRT = (1<<7)|(1<<6)|(1<<5)|(1<<4);		// definimos puerto para teclado
	
	while(1) {
		
		*PORTT = 0b11111111;
 2da:	f8 82       	st	Y, r15
 2dc:	47 e0       	ldi	r20, 0x07	; 7
 2de:	50 e0       	ldi	r21, 0x00	; 0
		
		for (uint8_t fila = 7; fila > 3; fila--) {
			
			*PORTT = ~(1<<fila);
 2e0:	ba 01       	movw	r22, r20
 2e2:	c8 01       	movw	r24, r16
 2e4:	04 2e       	mov	r0, r20
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <tecladoFuncion+0x2e>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <tecladoFuncion+0x2a>
 2f0:	80 95       	com	r24
 2f2:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <tecladoFuncion+0x38>



uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
 2f6:	80 81       	ld	r24, Z
			*PORTT = ~(1<<fila);
			_delay_us(2);
			
			for (uint8_t col = 0; col < 4; col++) {
				
				if (cero_en_bit(&*PINT,col)) {
 2f8:	80 ff       	sbrs	r24, 0
 2fa:	0e c0       	rjmp	.+28     	; 0x318 <tecladoFuncion+0x5a>
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0



uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
 300:	80 81       	ld	r24, Z
 302:	d9 01       	movw	r26, r18
			*PORTT = ~(1<<fila);
			_delay_us(2);
			
			for (uint8_t col = 0; col < 4; col++) {
				
				if (cero_en_bit(&*PINT,col)) {
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 2e       	mov	r0, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <tecladoFuncion+0x50>
 30a:	95 95       	asr	r25
 30c:	87 95       	ror	r24
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <tecladoFuncion+0x4c>
 312:	80 fd       	sbrc	r24, 0
 314:	2b c0       	rjmp	.+86     	; 0x36c <tecladoFuncion+0xae>
 316:	02 c0       	rjmp	.+4      	; 0x31c <tecladoFuncion+0x5e>



uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
 318:	a0 e0       	ldi	r26, 0x00	; 0
 31a:	b0 e0       	ldi	r27, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31c:	87 ea       	ldi	r24, 0xA7	; 167
 31e:	91 e6       	ldi	r25, 0x61	; 97
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <tecladoFuncion+0x62>
 324:	00 c0       	rjmp	.+0      	; 0x326 <tecladoFuncion+0x68>
 326:	00 00       	nop
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	0a 2e       	mov	r0, r26
 32e:	02 c0       	rjmp	.+4      	; 0x334 <tecladoFuncion+0x76>
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <tecladoFuncion+0x72>
 338:	80 81       	ld	r24, Z
			
			for (uint8_t col = 0; col < 4; col++) {
				
				if (cero_en_bit(&*PINT,col)) {
					_delay_ms(100);
					while(cero_en_bit(&*PINT,col)) {}
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	82 23       	and	r24, r18
 33e:	93 23       	and	r25, r19
 340:	89 2b       	or	r24, r25
 342:	d1 f3       	breq	.-12     	; 0x338 <tecladoFuncion+0x7a>
 344:	87 ea       	ldi	r24, 0xA7	; 167
 346:	91 e6       	ldi	r25, 0x61	; 97
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <tecladoFuncion+0x8a>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <tecladoFuncion+0x90>
 34e:	00 00       	nop
					_delay_ms(100);
					return teclado[7-fila][col];
 350:	87 e0       	ldi	r24, 0x07	; 7
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	86 1b       	sub	r24, r22
 356:	97 0b       	sbc	r25, r23
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	80 5a       	subi	r24, 0xA0	; 160
 362:	9f 4f       	sbci	r25, 0xFF	; 255
 364:	a8 0f       	add	r26, r24
 366:	b9 1f       	adc	r27, r25
 368:	8c 91       	ld	r24, X
 36a:	0c c0       	rjmp	.+24     	; 0x384 <tecladoFuncion+0xc6>
 36c:	2f 5f       	subi	r18, 0xFF	; 255
 36e:	3f 4f       	sbci	r19, 0xFF	; 255
		for (uint8_t fila = 7; fila > 3; fila--) {
			
			*PORTT = ~(1<<fila);
			_delay_us(2);
			
			for (uint8_t col = 0; col < 4; col++) {
 370:	24 30       	cpi	r18, 0x04	; 4
 372:	31 05       	cpc	r19, r1
 374:	29 f6       	brne	.-118    	; 0x300 <tecladoFuncion+0x42>
 376:	41 50       	subi	r20, 0x01	; 1
 378:	51 09       	sbc	r21, r1
	
	while(1) {
		
		*PORTT = 0b11111111;
		
		for (uint8_t fila = 7; fila > 3; fila--) {
 37a:	43 30       	cpi	r20, 0x03	; 3
 37c:	51 05       	cpc	r21, r1
 37e:	09 f0       	breq	.+2      	; 0x382 <tecladoFuncion+0xc4>
 380:	af cf       	rjmp	.-162    	; 0x2e0 <tecladoFuncion+0x22>
 382:	ab cf       	rjmp	.-170    	; 0x2da <tecladoFuncion+0x1c>
					return teclado[7-fila][col];
				}
			}
		}
	}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	ff 90       	pop	r15
 38e:	08 95       	ret

00000390 <main>:
		
volatile uint8_t instruccion =0;

int main(void)
{
	lcd_init(LCD_DISP_ON);
 390:	8c e0       	ldi	r24, 0x0C	; 12
 392:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_init>
	USART_init(MYUBRR);
 396:	8c e0       	ldi	r24, 0x0C	; 12
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 01 01 	call	0x202	; 0x202 <USART_init>
	sei();
 39e:	78 94       	sei
	DDRD = 0b00000010;
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	81 bb       	out	0x11, r24	; 17
	lcd_puts("Simon dice...");
 3a4:	8a e7       	ldi	r24, 0x7A	; 122
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
	while (1)
	{
		uint8_t lectura = tecladoFuncion(&DDRA, &PORTA, &PINA);	
 3ac:	49 e3       	ldi	r20, 0x39	; 57
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	6b e3       	ldi	r22, 0x3B	; 59
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	8a e3       	ldi	r24, 0x3A	; 58
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 5f 01 	call	0x2be	; 0x2be <tecladoFuncion>
		if (lectura == 1)
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	b9 f4       	brne	.+46     	; 0x3ee <main+0x5e>
		{
			lcd_gotoxy(0,1);
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0e 94 98 00 	call	0x130	; 0x130 <lcd_gotoxy>
			lcd_puts("                ");
 3c8:	86 e9       	ldi	r24, 0x96	; 150
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
			lcd_gotoxy(0,1);
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 98 00 	call	0x130	; 0x130 <lcd_gotoxy>
			lcd_puts("De pie");
 3d8:	87 ea       	ldi	r24, 0xA7	; 167
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
			USART_Transmit(lectura);
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <USART_Transmit>
			instruccion = lectura;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__data_end>
 3ec:	df cf       	rjmp	.-66     	; 0x3ac <main+0x1c>
		}
		else if (lectura == 2)
 3ee:	82 30       	cpi	r24, 0x02	; 2
 3f0:	b9 f4       	brne	.+46     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
		{
			lcd_gotoxy(0,1);
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 98 00 	call	0x130	; 0x130 <lcd_gotoxy>
			lcd_puts("                ");
 3fa:	86 e9       	ldi	r24, 0x96	; 150
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
			lcd_gotoxy(0,1);
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 98 00 	call	0x130	; 0x130 <lcd_gotoxy>
			lcd_puts("Sentado");
 40a:	8e ea       	ldi	r24, 0xAE	; 174
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
			USART_Transmit(lectura);
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <USART_Transmit>
			instruccion = lectura;
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__data_end>
 41e:	c6 cf       	rjmp	.-116    	; 0x3ac <main+0x1c>
		}
		else if (lectura == 3)
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	21 f6       	brne	.-120    	; 0x3ac <main+0x1c>
		{
			lcd_gotoxy(0,1);
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 98 00 	call	0x130	; 0x130 <lcd_gotoxy>
			lcd_puts("                ");
 42c:	86 e9       	ldi	r24, 0x96	; 150
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
			lcd_gotoxy(0,1);
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 98 00 	call	0x130	; 0x130 <lcd_gotoxy>
			lcd_puts("Agachado");
 43c:	86 eb       	ldi	r24, 0xB6	; 182
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_puts>
			USART_Transmit(lectura);
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <USART_Transmit>
			instruccion = lectura;
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__data_end>
 450:	ad cf       	rjmp	.-166    	; 0x3ac <main+0x1c>

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
