
Prac20_SlaveProgram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e2  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065c  00000000  00000000  000008be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00000f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000011b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000364  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d0  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 43 00 	call	0x86	; 0x86 <main>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <SPI_Slaveinit>:
}


void SPI_Slaveinit(void)
{
	DDRB |= (1<<6);
  7c:	be 9a       	sbi	0x17, 6	; 23
	SPCR = (1<<SPIE) | (1<<SPE) | (1<<SPR0);
  7e:	81 ec       	ldi	r24, 0xC1	; 193
  80:	8d b9       	out	0x0d, r24	; 13
	SPSR |= (1<<SPIF);
  82:	77 9a       	sbi	0x0e, 7	; 14
  84:	08 95       	ret

00000086 <main>:
volatile uint8_t dato = 0;
int main(void)
{
	
	
	SPI_Slaveinit();
  86:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_Slaveinit>
	ADMUX = 0b01100000;
  8a:	80 e6       	ldi	r24, 0x60	; 96
  8c:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10010110;
  8e:	86 e9       	ldi	r24, 0x96	; 150
  90:	86 b9       	out	0x06, r24	; 6
	sei();
  92:	78 94       	sei
  94:	ff cf       	rjmp	.-2      	; 0x94 <main+0xe>

00000096 <__vector_10>:
	SPCR = (1<<SPIE) | (1<<SPE) | (1<<SPR0);
	SPSR |= (1<<SPIF);
}

ISR(SPI_STC_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
	uint8_t dato = SPDR;
  a2:	8f b1       	in	r24, 0x0f	; 15
	SPSR |= (1<<SPIF);
  a4:	77 9a       	sbi	0x0e, 7	; 14
	if (dato == 0)
  a6:	81 11       	cpse	r24, r1
  a8:	08 c0       	rjmp	.+16     	; 0xba <__vector_10+0x24>
	{
		ADMUX = 0b01100000;
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC);
  ae:	36 9a       	sbi	0x06, 6	; 6
		while(uno_en_bit(&ADCSRA,ADSC)){}
  b0:	36 99       	sbic	0x06, 6	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <__vector_10+0x1a>
		uint8_t res  = ADCH;
  b4:	85 b1       	in	r24, 0x05	; 5
		SPDR = res;
  b6:	8f b9       	out	0x0f, r24	; 15
  b8:	09 c0       	rjmp	.+18     	; 0xcc <__vector_10+0x36>
		
	}
	else if (dato == 2)
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	39 f4       	brne	.+14     	; 0xcc <__vector_10+0x36>
	{
		ADMUX = 0b01100111;
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC);
  c2:	36 9a       	sbi	0x06, 6	; 6
		while(uno_en_bit(&ADCSRA,ADSC)){}
  c4:	36 99       	sbic	0x06, 6	; 6
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <__vector_10+0x2e>
		uint8_t res  = ADCH;
  c8:	85 b1       	in	r24, 0x05	; 5
		SPDR = res;
  ca:	8f b9       	out	0x0f, r24	; 15
	}
	
}
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
